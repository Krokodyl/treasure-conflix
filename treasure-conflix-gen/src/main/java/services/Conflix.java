package services;

import entities.Sprite;
import enums.PointerTableType;
import org.apache.commons.lang.ArrayUtils;
import org.apache.commons.lang.StringUtils;
import services.lz.LzCompressor;
import services.lz.LzDecompressor;
import services.lz.REPEAT_ALGORITHM;

import java.io.*;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

import static services.Utils.*;
import static services.Utils.hexStringToByteArray;

public class Conflix {


    static byte[] dataBios;
    static byte[] data;
    
    static Map<Integer, Integer> dataFilePointerFileMap = new HashMap<>();
    
    static {
        dataFilePointerFileMap.put(x("85131"),x("80100"));
    }
    
    public static void main(String[] args) {
        String rom = "D:\\git\\treasure-conflix\\roms\\work\\BS Treasure Conflix (Japan) - SNES - extended.sfc";
        String bios = "D:\\git\\treasure-conflix\\tools\\BS-X BIOS (English) [No DRM] [2016 v1.3].sfc";
        try {
            data = Files.readAllBytes(new File(rom).toPath());
            dataBios = Files.readAllBytes(new File(bios).toPath());
        } catch (IOException ex) {
            Logger.getLogger(Conflix.class.getName()).log(Level.SEVERE, null, ex);
        }
        //analyzeBytePairs();
        //decompressTable(data, x("84000"),x("84033"), x("80000"));

        
        String compOrig = "47 0A 00 CA DD C0 B0 A5 B5 CC A8 00 BD 7C CC A8 AF BC AD A2 00 1F AB B2 BD A1 02 CF C0 00 94 F2 18 D9 D6 B3 04 00 00 C6 C5 AF C0 C9 B6 A1 D6 00 B6 AF C0 C5 A1 04 00 0C 00 AC B1 A4 03 B5 DA 02 D3 00 8B 43 8D 87 B2 A6 93 FC 00 DA C5 B2 C4 C5 A1 01 00 00 94 F2 8B F3 92 F8 D3 95 00 F3 D3 91 81 B2 D3 C9 C9 00 8F 9F C1 10 B6 D7 C5 A3 00 7C B8 B2 AF B8 A2 8F EE 00 95 F1 02 06 B1 D9 C9 CA 00 B2 B2 06 A4 8B E0 A6 04 10 00 95 A5 DC 3B 00 B2 B9 C5 80 B2 C9 06 8C 99 10 D6 5E 10 00 BF DA 13 8C A9 C2 B9 D7 04 DA C5 6F 00 93 FA C6 AC 40 50 40 01 00 CF 71 20 CA 43 10 A6 08 8E E8 C6 73 00 C0 D7 A4 CE 00 C4 04 00 DD 14 C9 8F EA 40 8D 87 A4 95 F3 A6 36 10 10 14 BD 0E 43 20 06 A0 10 C9 03 1C 00 D7 B2 14 02 BB A3 7C A2 20 02 D6 B5 A4 03 D7 10 21 7B 08 30 04 00 F0 60 02 C6 8A E7 00 A6 8F 6F BD C9 CA 04 00 00 8B 76 BC 17 D8 0C AC C5 00 B2 B6 A1 7C 00 02 C1 AF 00 A4 8C 69 8B 43 C9 88 AB 00 BF B3 C5 03 C2 D7 02 BC 00 D4 06 AF C3 A1 7B 10 04 01 8C 00 91 44 06 96 B3 B2 DD 09 2D 00 40 40 12 10 8F 43 97 9D 00 C6 8F 6F BC C3 A4 D3 B3 48 A4 8F 5C B5 00 C5 D9 46 20 D4 00 AF 1A D8 A4 03 C4 DA 0C 68 AC B0 A5 65 11 02 68 00 25 31 C6 00 8F E6 AF C3 A4 8B F3 C6 0C 8F E3 58 00 40 01 04 00 90 B6 04 8B 43 58 00 B8 C5 AF C1 CF C0 B3 D0 C0 B2 10 C5 6F 00 8B 00 80 BC B6 C0 06 C5 B2 A4 7B 10 01 93 20 97 C7 B8 C5 D9 98 62 80 A6 95 B7 B6 BE C3 D4 69 00 81 D3 10 03 B5 CF B4 02 C9 81 31 08 10 B9 14 99 00 7C 00 40 40 A0 8E 64 8F E3 02 B8 00 D9 4F 10 A2 0F BE 20 03 CA AF 02 00 21 04 01 00 06 B0 02 C6 8D 73 AF C3 02 D0 D4 11 03 D2 D9 B8 02 06 44 91 D2 2C 00 CA 0D 10 32 01 91 00 81 02 B8 CF C0 95 F3 95 00 A8 A6 D0 C2 B9 C3 A4 BA 00 BA C6 04 00 8E 9D AF C3 08 BA B2 D6 07 21 8D 82 B8 94 0C 83 AF 81 10 E2 11 A2 02 DC BD 00 DA D9 C4 BA DB 10 AF C0 01 70 01 D7 B3 14 02 B6 D7 93 00 60 8C BE 06 B1 AF C0 0F 81 61 10 D7 DD 14 BD 18 B0 73 01 00 97 88 C3 97 7E BC B2 BF 04 B3 10 4C 02 C5 DD 13 D3 8B 00 F3 91 AF C6 91 44 A6 97 C8 8E C4 BB D8 01 BC B2 81 01 2E 50 01 DE 01 8F 8A 3F 05 00 96 59 02 DA 83 02 3F 00 BC AF B6 D8 00 BC DB D6 21 04 00 BA BA 60 C9 90 5E 96 6B B2 21 E2 11 CE 40 D7 A4 91 81 B8 03 D8 20 CD 03 D8 30 F9 01 95 F3 02 A6 94 84 80 D8 C0 B2 C9 B6 B2 3F AA 01 8D 84 02 06 7E 10 0F 10 A3 04 00 01 00 7C 95 F3 06 10 0A 00 A0 12 31 30 F1 00 C0 F2 D7 1D 10 CF C0 F7 00 F5 40 46 02 EE 01 00 20 8E 63 94 4F 02 10 06 01 72 41 BB DD 06 8B 81 D2 C3 3D 26 03 C5 DF 12 47 02 19 02 0F 21 B5 8B 20 E0 06 C0 D8 C5 38 20 89 AF 18 02 B4 C0 71 20 72 20 59 45 53 09 73 20 4E 4F 67 01 4F 02 C6 88 00 EA 93 78 A4 8B B3 B4 C0 24 C9 C6 72 01 B7 B7 AD 00 04 00 01 EC 00 8B E0 CA 8E E6 D7 C5 30 B2 06 40 40 AB 30 39 90 02 BF 01 56 02 A4 06 DD 15 AF C3 92 CC 54 BC C5 31 38 13 C0 D7 B3 40 67 01 04 B8 DA B6 10 02 BF B3 B6 A4 0F F9 50 5E 02 DB 10 7E 03 C0 D2 C3 A4 09 E0 20 97 88 C0 11 81 79 8D 95 10 8E 58 8C E8 45 02 AF 8F FC 90 D8 81 7A C9 2C 21 B1 D9 BD 11 87 95 20 32 61 C0 90 81 79 8B E0 33 F0 03 33 F0 33 B0 E2 02 C9 90 43 91 0E E4 32 F0 32 F0 25 11 92 6C 92 69 A0 7F 35 30 30 02 DA 02 B2 23 30 DB 24 F0 24 10 31 24 F0 24 F0 30 25 F0 D2 B0 00 90 5F 95 B6 8B CA 8E A2 00 81 7A 02 C9 92 6E 90 7D 0B A0 40 86 20 32 3E 10 13 14 B3 10 01 A8 F0 7C A2 8A 43 8A DD 90 20 FC 02 A6 93 8C 59 13 C0 8F 00 8A C6 91 E5 B7 C5 90 58 00 06 B1 04 00 D9 10 DB 3F 26 00 65 51 31 51 06 B1 EA 01 90 58 00 C9 14 BA B6 C6 89 42 BB 50 DA C3 B2 D9 FF 02 0F 8F 11 77 03 58 61 9C 04 00 00 C8 0C DA C0 00 98 72 C9 95 74 B9 8D AA 20 C6 40 40 81 78 3D 05 AA B6 02 AF 31 00 C9 CA BA DA 10 B9 01 B3 13 02 BA C9 8A 58 C6 0D 00 AF C4 8F 5A DD 13 B2 C0 18 03 0C B2 A0 12 AA 03 C5 8B DF 04 B8 C0 29 02 C5 A1 88 E2 8C 00 BE C4 BC C3 BF C9 91 A7 01 CE 03 71 C6 95 F3 C9 B1 D8 64 B6 A6 7D 12 DD 10 C2 05 C1 03 06 11 1D 10 8E 71 CA 5D 03 CA 96 DA 10 C5 93 7A 13 F4 15 BA DD C5 00 B2 B2 89 C1 8C B8 C5 90 04 AF CA AB 05 C4 B6 C7 B6 BC 00 04 00 C3 91 BC C9 90 AF 21 47 14 C1 CF AF C0 03 06 10 06 00 A4 8F 6F C3 8D 73 B8 91 00 4F C6 A4 03 DC BC 02 06 C0 C5 DD C4 B6 04 00 79 10 B2 04 A2 B7 26 05 C0 C9 BB E7 15 C9 8C 10 04 CA BA 06 04 01 00 81 77 8A 00 43 C9 89 E0 06 90 B0 DA 00 C0 C5 D7 15 A4 96 A6 C9 10 90 E6 92 5B 72 04 97 A7 AF 01 AE 00 8C FC BA B3 A6 C5 06 00 D2 D6 40 04 00 8A D4 8B 42 DF 58 21 93 87 06 A4 1B 30 C6 20 8F AC BB 01 00 11 10 8C A9 20 B4 D6 B3 A1 BF E2 10 90 5E 08 AF BD 08 EC 05 D9 B6 90 E6 A0 C6 A4 B6 BD B6 26 10 B8 24 30 83 8F 01 E6 04 A1 BF C9 93 87 03 01 01 E3 04 89 42 BC C0 A1 81 78 DC 01 00 16 02 55 00 3B 31 CA 4B 01 53 11 9F 01 07 52 11 22 01 9A 11 69 04 D6 A1 EA 36 00 C9 03 BA B8 1B AF C4 02 20 13 8D 4C 09 C3 1E 05 97 C0 41 08 04 92 6E 8C 60 A6 93 33 A3 06 7C 08 05 4E 47 14 B3 D4 D7 81 00 79 89 5F C9 94 E0 81 7A 01 83 06 CF 10 8C C3 91 E3 96 9C AF 06 54 15 F7 21 5A 07 01 00 D5 04 8A AF 0F 22 A4 21 60 89 42 DA 63 06 7D D3 11 D9 0D 15 42 07 23 05 AE 01 2F 10 BF 01 20 25 C6 C2 B2 C3 CA A4 BA 80 DA B6 D7 92 B2 18 D9 35 01 20 5C 92 E8 10 A1 13 26 D3 90 00 53 93 96 C0 D8 06 B1 DA C0 15 A4 04 00 B1 C0 EF 05 17 04 80 A3 7C 07 D9 D3 B1 A2 82 30 72 02 83 40 C9 C5 F4 04 6C 01 97 20 B6 0C D7 40 6C 01 E1 15 B1 09 DA 15 70 B2 B2 C9 10 01 05 35 20 1D 18 02 2C B8 DD C3 21 C3 30 C9 A2 00 97 A2 E0 C4 B2 B3 C9 A6 82 05 87 34 7C 04 48 C0 CF B4 01 31 88 E2 86 05 C6 00 8F DA BC B2 90 6C 95 A8 84 B6 A4 F9 10 95 B6 96 BE 58 11 01 15 40 C5 D7 89 BD B6 92 6D C1 D0 12 B6 D3 04 00 BC 52 08 3E 81 10 21 00 02 DC 7C 08 0F 21 00 04 05 00 73 90 CA 03 CC AB B0 00 C4 CC A7 C4 D7 BD 04 00 85 53 04 BC B9 01 AC DD 08 D9 B7 03 10 86 10 21 01 01 07 89 BD A4 19 56 10 C0 3F 0E 17 D7 18 A4 7B 20 51 3A 05 A6 8C BE 79 08 C9 C6 05 97 00 46 8F EE AF C3 D3 DD 10 12 DB C0 08 40 40 DB 18 BA C9 BA 2C C4 D3 8C 10 8B 70 A1 E2 20 C6 CA 00 91 CE 8B F3 96 68 8C E4 0C C9 88 1F 06 2A 21 95 BA 8A ED 93 D4 08 17 07 C4 D3 A9 18 92 6D B1 05 04 3F 00 73 15 BF DA C5 D7 8B 02 43 E6 08 C2 B9 DB D6 A1 91 00 95 94 F5 A6 90 AE B4 C3 0C B6 D7 1C 14 FC 08 FB 06 B2 B2 87 22 72 9E 01 5F 16 8B 43 02 A6 30 10 95 3B 32 02 8F 31 C9 64 51 13 A4 F8 07 71 2A 15 B2 C3 B7 C7 21 25 30 E0 05 93 8C 90 CF 3E 04 A6 09 40 40 05 43 09 30 C5 D7 97 A0 5C 25 77 41 8A D4 E1 BE 07 90 71 C8 C0 76 20 B7 08 53 06 01 9D 22 1D 1A D0 DD C4 02 C6 00 B2 D9 A4 03 B7 B0 DD 02 41 52 09 B2 B3 92 6A C6 62 10 D0 08 D9 C4 B2 95 12 93 90 95 69 00 A6 88 B5 AF C3 8F A4 94 C8 84 A6 BC A4 04 93 7A 2C 14 AB 12 02 13 78 10 C0 95 A8 C9 91 E5 50 94 BC CA 93 D0 05 8A D7 09 92 7A CA 99 04 B8 C9 17 F2 62 A3 02 2E 04 D3 11 E6 61 10 DB B3 85 42 93 90 02 C1 BB 30 C5 D7 98 62 06 39 0A C9 16 08 BB 8D DD 4B 00 97 4C 8E D2 00 B6 D7 A4 94 83 B2 8E E6 00 D9 C5 D8 04 00 D3 D7 B3 38 C5 D8 BD 90 12 6E 0A 40 33 C5 14 01 79 02 94 79 D6 D8 CA A4 D6 10 CE 14 8C F0 8E 09 C2 BC D4 00 BD B2 A1 40 40 C5 C6 BC 92 DB BD 10 C5 DD B6 09 B6 D7 50 30 19 27 2A BB B4 45 00 03 51 CC B3 40 00 40 8D A1 93 78 02 CA 8A 04 43 B6 24 08 BC B6 D3 03 14 80 A9 B0 D1 C4 D7 B2 B1 4D 12 00 C4 B7 C0 A1 05 00 D6 D8 B0 C6 D6 AF C3 57 39 52 07 10 49 02 00 03 D7 08 91 44 92 B7 02 1C 10 21 DE 08 0B 20 86 12 03 BB D9 80 18 B0 0C 91 44 02 06 46 70 04 04 00 95 02 13 88 F8 B7 8F 40 E3 09 A6 8E 6E D2 30 02 B2 08 B3 89 5C 72 15 94 DE C6 8B 00 A6 97 CD BC C3 D3 D7 B4 01 D8 10 90 CC A4 90 A2 98 62 09 75 3B 8E 96 30 0B 06 A4 94 DE 11 33 0B 92 6A 10 48 05 D7 A4 95 F0 4B 0D 97 CD 92 0B DE 07 C5 24 91 30 B0 DA CA BF DA D9 05 FE 11 03 DC 13 78 8E 81 02 C7 02 FA 00 0A 0B 1A 1A 91 72 44 C6 14 E6 BE 9B 05 3A 10 E6 0A 3F 00 01 00 D3 B3 03 DB 16 B0 34 02 13 F7 19 B2 12 25 C0 08 7B 90 00 6C C9 8A F3 96 5D 13 D3 86 B1 DB 19 D7 0B BF C9 8A D4 80 3B 70 C1 AE AF C4 B1 00 6F 04 0F 07 B2 0C 18 C3 A6 0A 37 06 14 B3 D3 C0 16 10 0C 05 A7 04 B8 E4 0A C4 CA 8E 30 76 B4 C5 B8 6E 06 DE 10 C9 8C 00 BE 97 74 D4 91 D4 93 78 70 C6 CA 8B 43 19 0B C2 24 FA 19 C6 30 B6 A6 8A E9 D6 14 3D 09 8A B4 62 0C 53 09 BD D9 DD 67 14 13 63 97 70 8A 02 D1 A1 CF 50 2F 0C C0 10 A4 8F 9C A1 29 09 86 51 7B 02 C6 8C FC 13 07 0C B8 DA B4 A0 83 00 8E 96 A6 13 D0 B7 D9 10 B9 B5 40 D9 98 35 C8 21 02 B6 CB 45 A6 8A 43 C6 90 F6 83 69 05 F1 0C C6 89 FC 91 A2 A7 06 27 6F 0A 63 09 B9 12 13 C6 A0 06 92 86 07 57 0A C6 C9 DA 0C 9C 1C C1 CF B4 0F 0A 00";
        String decompOrig = "00 CA DD C0 B0 A5 B5 CC A8 BD 7C CC A8 AF BC AD A2 1F AB B2 BD A1 02 CF C0 94 F2 18 D9 D6 B3 04 00 C6 C5 AF C0 C9 B6 A1 D6 B6 AF C0 C5 A1 04 00 0C AC B1 A4 03 B5 DA 02 D3 8B 43 8D 87 B2 A6 93 FC DA C5 B2 C4 C5 A1 01 00 94 F2 8B F3 92 F8 D3 95 F3 D3 91 81 B2 D3 C9 C9 8F 9F C1 10 B6 D7 C5 A3 7C B8 B2 AF B8 A2 8F EE 95 F1 02 06 B1 D9 C9 CA B2 B2 06 A4 8B E0 A6 04 00 95 A5 DC C5 B2 C4 B2 B9 C5 B2 C9 06 8C 99 10 D6 C5 A1 04 00 BF DA 13 8C A9 C2 B9 D7 DA C5 B6 AF C0 93 FA C6 AC 40 40 01 00 CF A4 03 B5 DA 02 CA 8F EE 95 F1 A6 8E E8 C6 93 FC DA C0 D7 A4 CE C4 04 00 DD 14 C9 8F EA 8D 87 A4 95 F3 A6 8C A9 C2 B9 10 BD 0E A1 04 00 BF DA 06 03 B5 DA 02 C9 03 1C D7 B2 14 02 BB A3 7C A2 02 D6 B5 A4 03 1F AB B2 BD 21 7B 30 04 00 CA DD C0 B0 A5 B5 CC A8 BD 02 C6 8A E7 A6 8F 6F BD C9 CA 04 00 8B 76 BC 17 D8 0C AC C5 B2 B6 A1 7C 00 02 C1 AF A4 8C 69 8B 43 C9 88 AB BF B3 C5 03 C2 D7 02 BC D4 06 AF C3 A1 7B 10 04 00 CF A4 91 44 06 96 B3 B2 DD 0C AC C5 40 40 7B 10 04 00 8F 43 97 9D C6 8F 6F BC C3 A4 D3 B3 A4 8F 5C 93 FA C6 C5 D9 B6 A1 7C 00 02 D4 AF 1A D8 A4 03 C4 DA 0C AC B0 A5 CA DD C0 B0 02 CA 04 00 94 F2 8B F3 92 F8 C6 8F E6 AF C3 A4 8B F3 C6 8F E3 06 AF C3 C5 B2 C4 04 00 90 B6 8B 43 06 96 B3 B8 C5 AF C1 CF B3 D0 C0 B2 10 C5 A1 7B 10 7C 00 02 BC B6 C0 06 C5 B2 A4 7B 10 04 00 8C 69 8B 43 C9 97 C7 B8 C5 D9 98 62 A6 95 B7 B6 BE C3 D4 D9 B6 A1 7B 30 04 00 03 B5 CF B4 02 C9 94 F2 8B F3 92 F8 10 B9 14 C5 40 40 7C 00 40 40 8E 64 8F E3 02 06 AF C3 D9 D0 C0 B2 10 0F A1 7B 10 04 00 03 CA AF CA AF CA 21 00 CA DD 06 B0 02 C6 8D 73 AF C3 D0 C5 A1 04 00 03 D2 D9 B8 02 06 91 D2 AF C3 D9 CA 0D 10 A3 7C A2 91 81 02 B8 CF C0 95 F3 95 A8 A6 D0 C2 B9 C3 A4 BA BA C6 04 00 8E 9D AF C3 BA B2 D6 A1 7B 10 04 00 8D 82 B8 94 83 AF C3 D4 D9 B6 D7 C5 A3 7C A2 02 DC BD DA D9 C4 BA DB 10 AF C0 A3 7C A2 D7 B3 14 02 B6 D7 93 60 8C BE 06 B1 AF C0 0F A1 04 00 03 D7 DD 14 BD 18 B0 BD 02 C6 97 88 C3 97 7E BC B2 BF B3 10 A1 04 00 C5 DD 13 D3 8B F3 91 AF C6 91 44 A6 97 8E C4 BB DA C0 D7 BC B2 A1 7C 00 D7 DD 14 BD 18 B0 BD 02 C9 8F EA 8F 8A 3F 05 00 96 59 DA C0 C9 B6 3F 00 BC AF B6 D8 BC DB D6 21 04 00 BA BA C9 90 5E 96 6B 0C AC C5 B2 B6 A3 7C A2 02 CE D7 A4 91 81 B8 03 CA DD 06 B0 02 CD 8D 73 AF C3 D0 C5 A3 7C A2 95 F3 02 A6 94 84 D8 C0 B2 C9 B6 B2 3F 04 00 8F EE 95 F1 06 97 7E BC B2 C9 B6 B2 3F A3 04 00 00 00 00 95 F3 00 00 00 00 00 00 00 8F EE 95 F1 7C A2 95 F3 02 A6 D0 C2 B9 C0 D7 04 00 00 00 CF C0 BA BA C6 8E 9D AF C3 BA B2 D6 A3 7C A2 40 40 7B 20 8E 63 94 4F 02 10 06 04 00 03 B5 CF B4 02 BB DD 06 8B 81 D2 C3 D9 D6 B3 C5 8F EE 95 F1 CA 04 00 96 B3 B2 C5 A3 7C A2 02 B5 8B E0 06 C0 D8 C5 B2 D6 A3 7C A2 89 AF 02 B4 C0 B6 B2 3F A3 04 04 00 00 00 00 59 45 53 00 00 00 00 00 4E 4F 7C A2 91 4F 02 C6 88 EA 93 78 A4 8B B3 B4 C0 C9 C6 CF C0 95 B7 B7 C0 B2 C9 04 00 B6 3F 00 8B E0 CA 8E E6 D7 C5 B2 06 40 40 A3 04 00 00 00 00 59 45 53 00 00 00 00 00 4E 4F 7C A2 02 BF DA 0C AC A4 06 DD 15 AF C3 92 54 BC C3 D0 C5 A1 04 00 8C A9 C2 B9 C0 D7 BA BA C6 8E 9D AF C3 97 88 C3 B8 DA D6 A3 7C A2 02 BF B3 B6 A4 8F EE 95 F1 06 97 7E BC B8 C5 AF C0 D7 04 00 8B E0 A6 C0 D2 C3 A4 CF C0 BA BA C6 97 88 C5 A3 7C A2 81 79 8D 95 8E 58 8C E8 02 C9 94 AF 8F FC D8 81 7A C9 8F EE 95 F1 06 B1 D9 0F A1 04 00 95 B7 B7 C0 B2 B6 B2 3F A3 04 00 00 00 00 59 45 53 00 00 00 00 00 4E 4F 7C A2 81 79 8B E0 02 C9 94 AF 8F FC D8 81 7A C9 8F EE 95 F1 06 B1 D9 0F A1 04 00 95 B7 B7 C0 B2 B6 B2 3F A3 04 00 00 00 00 59 45 53 00 00 00 00 00 4E 4F 7C A2 81 79 8B E2 02 C9 90 43 91 E4 81 7A C9 8F EE 95 F1 06 B1 D9 0F A1 04 00 95 B7 B7 C0 B2 B6 B2 3F A3 04 00 00 00 00 59 45 53 00 00 00 00 00 4E 4F 7C A2 92 6C 92 69 7F 35 30 30 02 10 B9 14 B2 B2 B6 B2 3F A3 04 04 00 00 00 00 59 45 53 00 00 00 00 00 4E 4F 7C A2 92 6C 92 69 7F 31 30 30 02 10 B9 14 B2 B2 B6 B2 3F A3 04 04 00 00 00 00 59 45 53 00 00 00 00 00 4E 4F 7C A2 92 6C 92 69 7F 31 30 30 30 02 10 B9 14 B2 B2 B6 B2 3F A3 04 04 00 00 00 00 59 45 53 00 00 00 00 00 4E 4F 7C A2 81 79 90 5F 95 B6 8B CA 8E A2 81 7A 02 C9 92 6E 90 7D 06 B1 D9 0F A1 04 00 92 6C 92 69 7F 32 30 30 30 02 13 14 B3 10 B2 3F A3 04 00 00 00 00 59 45 53 00 00 00 00 00 4E 4F 7C A2 8A 43 8A DD 90 FC 02 A6 93 8C C6 8D 73 AF C0 8F 8A C6 91 E5 B7 C5 90 58 06 B1 04 00 D9 10 DB 3F 00 81 79 8D 95 8E 58 8C E8 C9 94 AF 8F FC D8 81 7A 06 B1 C9 04 00 90 58 C9 14 BA B6 C6 89 42 BB DA C3 B2 D9 D7 BC B2 0F A3 7C A2 81 77 8B E0 02 C9 94 AF 8F FC D8 CA 04 00 00 00 C8 0C DA C0 98 72 C9 95 74 B9 8D AA C6 40 40 81 78 04 00 95 AA B6 AF C3 B2 D9 C9 CA BA DA 10 B9 10 A3 7C A2 02 BA C9 8A 58 C6 0D AF C4 8F 5A DD 13 B2 C0 03 0C B2 02 BB DD 06 04 00 8D C5 8B DF B8 C0 15 AF C3 C5 A1 88 E2 8C BE C4 BC C3 BF C9 91 A7 04 00 8E 71 C6 95 F3 C9 B1 D8 B6 A6 8B B3 B4 C0 DD 10 A1 01 00 C4 BA DB 06 BF C9 91 A7 8E 71 CA 90 5E 96 CA 96 DA C5 93 7A 13 C5 A1 04 00 BA DD C5 B2 B2 89 C1 8C B8 C5 90 AF CA 8C 99 10 C4 B6 C7 B6 BC 04 00 C3 91 BC C9 90 AF C6 8D 73 AF C1 CF AF C0 A1 01 00 10 06 A4 8F 6F C3 8D 73 B8 91 4F C6 A4 03 DC BC 02 06 C5 DD C4 B6 04 00 88 E2 8C BE A6 95 B7 B7 8F 6F BC C0 C9 BB A1 04 00 BF C9 88 E2 8C BE CA BA B3 10 A1 01 00 81 77 8A 43 C9 89 E0 06 90 B0 DA C0 C5 D7 15 A4 96 A6 C9 90 E6 92 5B C6 04 00 97 A7 AF C3 BF C9 8C FC BA B3 A6 C5 06 D2 D6 40 04 00 8A D4 8B DF C6 91 E5 B7 C5 93 87 06 A4 BF C9 8C FC BA B3 C6 8F AC BB 01 00 C5 93 87 06 8C A9 B4 D6 B3 A1 BF BC C3 BF C9 90 5E AF BD 08 04 00 CA D9 B6 90 E6 C6 A4 B6 BD B6 C6 8F AC BB B8 93 87 06 8C A9 B4 04 00 D9 CA 0D 10 A1 BF C9 93 87 C6 95 F3 95 A8 A6 89 42 BC C0 A1 81 78 01 00 B2 B2 B6 A4 BF C9 03 0C B2 02 BB DD CA 0D AF C4 BA C9 8A 58 04 00 C6 8F 5A DD 13 C0 DD 10 0F A3 7C A2 02 CE D7 D6 A1 94 F2 8B F3 92 F8 C9 03 BA B8 1B AF C4 02 13 8D 4C 09 C3 04 00 8E 97 C0 D6 B3 C5 92 6E 8C 60 A6 92 54 BC C3 D0 C5 A3 7C D7 B3 14 A2 1F AB B2 BD A1 02 14 B3 D4 D7 81 79 89 5F C9 94 E0 81 7A 04 00 CA CF 10 8C C3 91 E3 96 AF 06 8E 9D AF C3 B2 D9 D7 BC B2 A1 04 00 01 00 BA C9 90 AF C9 14 BA B6 C6 A4 CF 10 8C C3 91 E3 96 AF 06 89 42 DA 04 00 8F 5A DD 13 B2 D9 8F EA 8F 8A 06 B1 D9 D7 BC B2 DD 10 A1 04 00 01 00 BF C9 8F EA 8F 8A C6 C2 B2 C3 CA A4 BA DA B6 D7 92 B2 18 D9 04 00 97 5C 92 E8 10 A1 03 B5 CF B4 02 D3 90 53 93 96 C0 D8 06 B1 DA 15 A4 04 00 B1 C0 AF C3 D0 C3 B8 DA A3 7C 07 D9 D3 B1 A2 8C C3 91 E3 96 AF 02 06 8E 9D AF C3 B2 D9 C9 C5 D7 04 00 BF C9 8C C3 91 E3 96 AF B6 D7 40 40 04 00 94 83 AF C3 B1 09 DA 15 B2 B2 C9 10 D6 A3 7C 07 D9 D3 B1 A2 1F AB B2 BD 02 B8 DD A1 04 00 BF C9 8C C3 91 E3 96 AF C9 89 42 DA 97 A2 C4 B2 B3 C9 A6 91 81 B8 04 00 8C A9 C2 B9 C3 B8 DA C0 CF B4 A3 7C D7 B3 14 A2 88 E2 95 F3 02 C6 8F DA BC B2 90 6C 95 A8 B6 A4 8C C3 91 E3 95 B6 96 BE 04 00 C6 8F DA BC B2 90 6C 95 A8 C5 D7 89 BD B6 92 6D AF C3 B2 D9 B6 D3 04 00 BC DA C5 B2 C5 A3 7C D7 B3 14 A2 1F AB B2 BD 21 00 02 DC B6 AF C0 0F 21 00 05 00 8C C3 91 E3 96 AF C9 89 42 DA 97 A2 CA 03 CC AB B0 C4 CC A7 C4 D7 BD 04 00 02 C9 90 BC C9 03 0C AC DD 08 D9 02 C9 92 86 10 21 01 00 40 40 89 BD A4 92 6D AF C3 C0 3F 7C 00 40 40 1F AB B2 BD A4 7B 20 02 BF DA A6 8C BE DC C5 B2 C9 06 04 00 97 46 8F EE AF C3 D3 DD 10 DB A1 01 00 40 40 0C AC B1 A4 BA C9 BA C4 D3 92 6D AF C3 D9 B6 D3 04 00 BC DA C5 B2 C5 A1 89 42 DA 97 A2 C6 CA 91 CE 8B F3 96 68 8C E4 C9 88 D7 04 00 C9 8C C3 91 E3 95 BA 8A ED 06 B1 D9 AF C3 BA C4 D3 40 40 01 00 92 6D D7 C5 B2 3F 00 BF B3 B6 A4 BF DA C5 D7 8B 43 A6 04 00 C2 B9 DB D6 A1 91 95 94 F5 A6 90 AE B4 C3 B6 D7 8D 73 AF C0 04 00 95 FB 06 B2 B2 A3 7C D7 B3 14 A2 1F AB B2 BD A4 04 00 40 40 7B 20 8B 43 02 A6 C2 B9 DB D6 A3 7C D7 B3 14 A2 02 BF C9 8C C3 91 E3 C9 96 AF C9 89 42 DA 97 A2 13 A4 98 62 A6 04 00 95 B7 B2 C3 B7 C3 B8 DA A3 7C D7 B3 14 A2 02 BF B3 B6 A4 93 90 CF DA C3 B2 C0 C9 B6 40 40 05 00 BF DA C5 D7 97 A0 C9 8F EE 95 F1 C6 8F DA BC B2 90 6C 8A D4 C6 04 00 90 71 C8 C0 95 FB 06 B2 B2 C5 40 40 40 40 A3 7C D7 B3 14 A2 1D 1A D0 DD C4 02 C6 B2 D9 A4 03 B7 B0 DD 02 C4 04 00 B2 B3 92 6A C6 95 B7 B2 C3 D0 D9 C4 B2 B2 A1 04 00 93 90 95 69 A6 88 B5 AF C3 8F A4 94 84 A6 BC C3 B2 D9 93 7A 10 A1 01 00 BA C9 90 AF 13 93 90 CF DA C0 95 A8 C9 91 E5 94 BC CA 93 7A C9 8F 8A A6 04 00 92 CA AF C3 B2 B8 D7 BC B2 A1 81 79 89 5F C9 94 E0 81 7A C6 C2 B2 04 00 C3 D3 89 BD B6 92 6D AF C3 B2 D9 10 DB B3 A3 7C 07 D9 D3 B1 A2 93 90 02 CF DA C3 B2 C0 C9 C5 D7 98 62 06 91 81 B2 A1 04 00 8C BB 8D DD C9 8F 8A 97 4C 8E D2 B6 D7 A4 94 83 B2 8E E6 D9 C5 D8 04 00 D3 D7 B3 C5 D8 BD DA 15 B2 B2 A1 01 00 8C C3 91 E3 96 AF C5 14 C4 B2 B3 94 79 D6 D8 CA A4 D6 CE 14 8C F0 04 00 8F C2 BC D4 BD B2 A1 40 40 C5 C6 BC DB 93 90 95 69 C5 DD 10 04 00 B6 D7 8F 8A 97 4C 8E D2 A6 8C A9 C2 B9 BB B4 BD DA 15 40 40 A3 7C D7 B3 14 A2 CC B3 40 40 8D A1 93 78 02 CA 8A 43 B6 3F 04 00 BC B6 D3 03 14 A9 B0 D1 C4 D7 B2 B1 DD 08 D9 02 C4 B7 C0 A1 05 00 D6 D8 C6 D6 AF C3 40 40 7C 00 40 40 02 BF B3 10 A4 7B 20 03 D7 08 91 44 92 B7 02 10 21 00 03 D7 08 91 44 92 B7 04 00 02 C9 03 BB D9 18 B0 0C 91 44 02 06 03 14 A9 B0 D1 C4 D7 B2 B1 DD 04 00 08 D9 02 13 88 F8 B7 8F E3 09 A6 8E 6E D2 D9 AF C3 B2 B3 89 5C 10 A1 01 00 94 DE C6 8B A6 97 CD BC C3 D3 D7 B4 15 B2 B2 A1 90 CC A4 90 A2 98 62 04 00 C6 C5 AF C0 8E 96 06 B1 D9 06 A4 94 DE CA B2 B2 92 6A 10 B6 04 00 D7 A4 95 4B 0D 97 CD C6 C5 AF C3 B8 DA D9 CA 0D 10 A1 7C 00 40 40 02 BF DA CA BF DA C4 BC C3 40 40 05 00 03 07 D9 D3 B1 8E 81 02 C9 BA C4 C5 DD 10 06 03 B5 CF B4 02 C9 91 44 04 00 C6 8F E6 BE C3 8D 73 AF C3 B8 DA C5 B2 B6 3F 01 00 D3 B3 03 DB 16 B0 02 13 91 D2 AF C3 B2 D9 CA 0D 10 A1 04 00 96 7B 90 6C C9 8A F3 96 5D 13 D3 B1 D9 B6 D7 C5 A1 01 00 BF C9 8A D4 A4 03 B5 DA 02 CA C1 AE AF C4 94 DE C6 C2 B2 C3 04 00 92 B2 18 C3 D0 C0 B2 DD 10 A1 14 B3 D3 C0 10 C9 03 BA DA 04 00 B8 C0 B0 02 C4 CA 8E 76 B4 C5 B8 C3 C5 A1 01 00 94 DE C9 8C BE 97 74 D4 91 D4 93 78 C6 CA 8B 43 C6 C5 D9 8F 8A 06 B1 D9 A1 04 00 C5 C6 B6 A6 8A E9 DD 13 B2 D9 D6 B3 C5 8A B4 0C 06 04 00 BD D9 DD 10 D6 A3 7C D7 B3 14 A2 1F AB B2 BD A4 97 8A 02 D1 A1 03 07 D9 D3 B1 8E 81 02 A6 04 00 8F E6 BE C3 A4 03 14 A9 B0 D1 C4 D7 B2 B1 DD 08 D9 02 C9 04 00 03 D7 08 91 44 92 B7 02 C9 8F 8A C6 8C FC B6 AF C3 B8 DA A1 01 00 BF C9 8A D4 A4 03 B5 DA 02 CA 94 DE C9 8E 96 A6 13 B7 D9 10 B9 04 00 92 B2 18 C3 D0 D9 A3 7C D7 B3 14 A2 40 40 02 BF B3 B6 A1 94 F2 8B F3 92 F8 A6 8A 43 C6 90 F6 DA 04 00 D9 D6 B3 C6 89 FC 91 A2 BC C0 C9 B6 3F 00 0C AC A4 C2 B2 04 00 13 C6 8A 43 C9 92 86 C9 95 F3 D3 8C A9 C2 B9 C1 CF B4 D6 A3 7C ";
        
        LzDecompressor lzDecompressor = new LzDecompressor();
        System.out.println(REPEAT_ALGORITHM.buildRepeatCommand(b("32"),b("F0"), REPEAT_ALGORITHM.REPEAT_ALGORITHM_SIZE_4BITS));
        //System.out.println(lzDecompressor.buildRepeatCommand(4, b("5E"),b("10")));
        //lzDecompressor.decompressData(data, x("80100"), "src/main/resources/gen/mem/80000/80100.data", false);
        String myDecomp = "00 "+bytesToHex(lzDecompressor.getDecompressedData());
        System.out.println("Decompressed orig: \t\t"+decompOrig);
        System.out.println("Decompressed data :\t\t"+myDecomp);
        System.out.println(decompOrig.equals(myDecomp));
        System.out.println(StringUtils.difference(decompOrig, myDecomp));
        /*
        LzCompressor lzCompressor = new LzCompressor();
        try {
            byte[] compressData = lzCompressor.compressData(lzDecompressor.getDecompressedData(), true);
            String myComp = bytesToHex(compressData);
            System.out.println("Compressed orig: \t\t"+compOrig);
            System.out.println("My compressed data :\t"+myComp);
            System.out.println(compOrig.equals(myComp));
            System.out.println(StringUtils.difference(compOrig, myComp));

            lzDecompressor = new LzDecompressor();
            lzDecompressor.decompressData(data, x("8C700"), false);
            myDecomp = "00 "+bytesToHex(lzDecompressor.getDecompressedData());
            System.out.println("Decompressed data :\t\t"+myDecomp);
            
        } catch (IOException e) {
            e.printStackTrace();
        }*/
        
        

        /*try {
            LzCompressor lzCompressor = new LzCompressor();
            byte[] japanese85131 = hexStringToByteArray("CA DD C0 B0 A5 B5 CC A8 BD 7C CC A8 AF BC AD A2 1F AB B2 BD A1 02 CF C0 94 F2 18 D9 D6 B3 04 00 C6 C5 AF C0 C9 B6 A1 D6 B6 AF C0 C5 A1 04 00 0C AC B1 A4 03 B5 DA 02 D3 8B 43 8D 87 B2 A6 93 FC DA C5 B2 C4 C5 A1 01 00 94 F2 8B F3 92 F8 D3 95 F3 D3 91 81 B2 D3 C9 C9 8F 9F C1 10 B6 D7 C5 A3 7C B8 B2 AF B8 A2 8F EE 95 F1 02 06 B1 D9 C9 CA B2 B2 06 A4 8B E0 A6 04 00 95 A5 DC C5 B2 C4 B2 B9 C5 B2 C9 06 8C 99 10 D6 C5 A1 04 00 BF DA 13 8C A9 C2 B9 D7 DA C5 B6 AF C0 93 FA C6 AC 40 40 01 00 CF A4 03 B5 DA 02 CA 8F EE 95 F1 A6 8E E8 C6 93 FC DA C0 D7 A4 CE C4 04 00 DD 14 C9 8F EA 8D 87 A4 95 F3 A6 8C A9 C2 B9 10 BD 0E A1 04 00 BF DA 06 03 B5 DA 02 C9 03 1C D7 B2 14 02 BB A3 7C A2 02 D6 B5 A4 03 1F AB B2 BD 21 7B 30 04 00 CA DD C0 B0 A5 B5 CC A8 BD 02 C6 8A E7 A6 8F 6F BD C9 CA 04 00 8B 76 BC 17 D8 0C AC C5 B2 B6 A1 7C 00 02 C1 AF A4 8C 69 8B 43 C9 88 AB BF B3 C5 03 C2 D7 02 BC D4 06 AF C3 A1 7B 10 04 00 CF A4 91 44 06 96 B3 B2 DD 0C AC C5 40 40 7B 10 04 00 8F 43 97 9D C6 8F 6F BC C3 A4 D3 B3 A4 8F 5C 93 FA C6 C5 D9 B6 A1 7C 00 02 D4 AF 1A D8 A4 03 C4 DA 0C AC B0 A5 CA DD C0 B0 02 CA 04 00 94 F2 8B F3 92 F8 C6 8F E6 AF C3 A4 8B F3 C6 8F E3 06 AF C3 C5 B2 C4 04 00 90 B6 8B 43 06 96 B3 B8 C5 AF C1 CF B3 D0 C0 B2 10 C5 A1 7B 10 7C 00 02 BC B6 C0 06 C5 B2 A4 7B 10 04 00 8C 69 8B 43 C9 97 C7 B8 C5 D9 98 62 A6 95 B7 B6 BE C3 D4 D9 B6 A1 7B 30 04 00 03 B5 CF B4 02 C9 94 F2 8B F3 92 F8 10 B9 14 C5 40 40 7C 00 40 40 8E 64 8F E3 02 06 AF C3 D9 D0 C0 B2 10 0F A1 7B 10 04 00 03 CA AF CA AF CA 21 00 CA DD 06 B0 02 C6 8D 73 AF C3 D0 C5 A1 04 00 03 D2 D9 B8 02 06 91 D2 AF C3 D9 CA 0D 10 A3 7C A2 91 81 02 B8 CF C0 95 F3 95 A8 A6 D0 C2 B9 C3 A4 BA BA C6 04 00 8E 9D AF C3 BA B2 D6 A1 7B 10 04 00 8D 82 B8 94 83 AF C3 D4 D9 B6 D7 C5 A3 7C A2 02 DC BD DA D9 C4 BA DB 10 AF C0 A3 7C A2 D7 B3 14 02 B6 D7 93 60 8C BE 06 B1 AF C0 0F A1 04 00 03 D7 DD 14 BD 18 B0 BD 02 C6 97 88 C3 97 7E BC B2 BF B3 10 A1 04 00 C5 DD 13 D3 8B F3 91 AF C6 91 44 A6 97 8E C4 BB DA C0 D7 BC B2 A1 7C 00 D7 DD 14 BD 18 B0 BD 02 C9 8F EA 8F 8A 3F 05 00 96 59 DA C0 C9 B6 3F 00 BC AF B6 D8 BC DB D6 21 04 00 BA BA C9 90 5E 96 6B 0C AC C5 B2 B6 A3 7C A2 02 CE D7 A4 91 81 B8 03 CA DD 06 B0 02 CD 8D 73 AF C3 D0 C5 A3 7C A2 95 F3 02 A6 94 84 D8 C0 B2 C9 B6 B2 3F 04 00 8F EE 95 F1 06 97 7E BC B2 C9 B6 B2 3F A3 04 00 00 00 00 95 F3 00 00 00 00 00 00 00 8F EE 95 F1 7C A2 95 F3 02 A6 D0 C2 B9 C0 D7 04 00 00 00 CF C0 BA BA C6 8E 9D AF C3 BA B2 D6 A3 7C A2 40 40 7B 20 8E 63 94 4F 02 10 06 04 00 03 B5 CF B4 02 BB DD 06 8B 81 D2 C3 D9 D6 B3 C5 8F EE 95 F1 CA 04 00 96 B3 B2 C5 A3 7C A2 02 B5 8B E0 06 C0 D8 C5 B2 D6 A3 7C A2 89 AF 02 B4 C0 B6 B2 3F A3 04 04 00 00 00 00 59 45 53 00 00 00 00 00 4E 4F 7C A2 91 4F 02 C6 88 EA 93 78 A4 8B B3 B4 C0 C9 C6 CF C0 95 B7 B7 C0 B2 C9 04 00 B6 3F 00 8B E0 CA 8E E6 D7 C5 B2 06 40 40 A3 04 00 00 00 00 59 45 53 00 00 00 00 00 4E 4F 7C A2 02 BF DA 0C AC A4 06 DD 15 AF C3 92 54 BC C3 D0 C5 A1 04 00 8C A9 C2 B9 C0 D7 BA BA C6 8E 9D AF C3 97 88 C3 B8 DA D6 A3 7C A2 02 BF B3 B6 A4 8F EE 95 F1 06 97 7E BC B8 C5 AF C0 D7 04 00 8B E0 A6 C0 D2 C3 A4 CF C0 BA BA C6 97 88 C5 A3 7C A2 81 79 8D 95 8E 58 8C E8 02 C9 94 AF 8F FC D8 81 7A C9 8F EE 95 F1 06 B1 D9 0F A1 04 00 95 B7 B7 C0 B2 B6 B2 3F A3 04 00 00 00 00 59 45 53 00 00 00 00 00 4E 4F 7C A2 81 79 8B E0 02 C9 94 AF 8F FC D8 81 7A C9 8F EE 95 F1 06 B1 D9 0F A1 04 00 95 B7 B7 C0 B2 B6 B2 3F A3 04 00 00 00 00 59 45 53 00 00 00 00 00 4E 4F 7C A2 81 79 8B E2 02 C9 90 43 91 E4 81 7A C9 8F EE 95 F1 06 B1 D9 0F A1 04 00 95 B7 B7 C0 B2 B6 B2 3F A3 04 00 00 00 00 59 45 53 00 00 00 00 00 4E 4F 7C A2 92 6C 92 69 7F 35 30 30 02 10 B9 14 B2 B2 B6 B2 3F A3 04 04 00 00 00 00 59 45 53 00 00 00 00 00 4E 4F 7C A2 92 6C 92 69 7F 31 30 30 02 10 B9 14 B2 B2 B6 B2 3F A3 04 04 00 00 00 00 59 45 53 00 00 00 00 00 4E 4F 7C A2 92 6C 92 69 7F 31 30 30 30 02 10 B9 14 B2 B2 B6 B2 3F A3 04 04 00 00 00 00 59 45 53 00 00 00 00 00 4E 4F 7C A2 81 79 90 5F 95 B6 8B CA 8E A2 81 7A 02 C9 92 6E 90 7D 06 B1 D9 0F A1 04 00 92 6C 92 69 7F 32 30 30 30 02 13 14 B3 10 B2 3F A3 04 00 00 00 00 59 45 53 00 00 00 00 00 4E 4F 7C A2 8A 43 8A DD 90 FC 02 A6 93 8C C6 8D 73 AF C0 8F 8A C6 91 E5 B7 C5 90 58 06 B1 04 00 D9 10 DB 3F 00 81 79 8D 95 8E 58 8C E8 C9 94 AF 8F FC D8 81 7A 06 B1 C9 04 00 90 58 C9 14 BA B6 C6 89 42 BB DA C3 B2 D9 D7 BC B2 0F A3 7C A2 81 77 8B E0 02 C9 94 AF 8F FC D8 CA 04 00 00 00 C8 0C DA C0 98 72 C9 95 74 B9 8D AA C6 40 40 81 78 04 00 95 AA B6 AF C3 B2 D9 C9 CA BA DA 10 B9 10 A3 7C A2 02 BA C9 8A 58 C6 0D AF C4 8F 5A DD 13 B2 C0 03 0C B2 02 BB DD 06 04 00 8D C5 8B DF B8 C0 15 AF C3 C5 A1 88 E2 8C BE C4 BC C3 BF C9 91 A7 04 00 8E 71 C6 95 F3 C9 B1 D8 B6 A6 8B B3 B4 C0 DD 10 A1 01 00 C4 BA DB 06 BF C9 91 A7 8E 71 CA 90 5E 96 CA 96 DA C5 93 7A 13 C5 A1 04 00 BA DD C5 B2 B2 89 C1 8C B8 C5 90 AF CA 8C 99 10 C4 B6 C7 B6 BC 04 00 C3 91 BC C9 90 AF C6 8D 73 AF C1 CF AF C0 A1 01 00 10 06 A4 8F 6F C3 8D 73 B8 91 4F C6 A4 03 DC BC 02 06 C5 DD C4 B6 04 00 88 E2 8C BE A6 95 B7 B7 8F 6F BC C0 C9 BB A1 04 00 BF C9 88 E2 8C BE CA BA B3 10 A1 01 00 81 77 8A 43 C9 89 E0 06 90 B0 DA C0 C5 D7 15 A4 96 A6 C9 90 E6 92 5B C6 04 00 97 A7 AF C3 BF C9 8C FC BA B3 A6 C5 06 D2 D6 40 04 00 8A D4 8B DF C6 91 E5 B7 C5 93 87 06 A4 BF C9 8C FC BA B3 C6 8F AC BB 01 00 C5 93 87 06 8C A9 B4 D6 B3 A1 BF BC C3 BF C9 90 5E AF BD 08 04 00 CA D9 B6 90 E6 C6 A4 B6 BD B6 C6 8F AC BB B8 93 87 06 8C A9 B4 04 00 D9 CA 0D 10 A1 BF C9 93 87 C6 95 F3 95 A8 A6 89 42 BC C0 A1 81 78 01 00 B2 B2 B6 A4 BF C9 03 0C B2 02 BB DD CA 0D AF C4 BA C9 8A 58 04 00 C6 8F 5A DD 13 C0 DD 10 0F A3 7C A2 02 CE D7 D6 A1 94 F2 8B F3 92 F8 C9 03 BA B8 1B AF C4 02 13 8D 4C 09 C3 04 00 8E 97 C0 D6 B3 C5 92 6E 8C 60 A6 92 54 BC C3 D0 C5 A3 7C D7 B3 14 A2 1F AB B2 BD A1 02 14 B3 D4 D7 81 79 89 5F C9 94 E0 81 7A 04 00 CA CF 10 8C C3 91 E3 96 AF 06 8E 9D AF C3 B2 D9 D7 BC B2 A1 04 00 01 00 BA C9 90 AF C9 14 BA B6 C6 A4 CF 10 8C C3 91 E3 96 AF 06 89 42 DA 04 00 8F 5A DD 13 B2 D9 8F EA 8F 8A 06 B1 D9 D7 BC B2 DD 10 A1 04 00 01 00 BF C9 8F EA 8F 8A C6 C2 B2 C3 CA A4 BA DA B6 D7 92 B2 18 D9 04 00 97 5C 92 E8 10 A1 03 B5 CF B4 02 D3 90 53 93 96 C0 D8 06 B1 DA 15 A4 04 00 B1 C0 AF C3 D0 C3 B8 DA A3 7C 07 D9 D3 B1 A2 8C C3 91 E3 96 AF 02 06 8E 9D AF C3 B2 D9 C9 C5 D7 04 00 BF C9 8C C3 91 E3 96 AF B6 D7 40 40 04 00 94 83 AF C3 B1 09 DA 15 B2 B2 C9 10 D6 A3 7C 07 D9 D3 B1 A2 1F AB B2 BD 02 B8 DD A1 04 00 BF C9 8C C3 91 E3 96 AF C9 89 42 DA 97 A2 C4 B2 B3 C9 A6 91 81 B8 04 00 8C A9 C2 B9 C3 B8 DA C0 CF B4 A3 7C D7 B3 14 A2 88 E2 95 F3 02 C6 8F DA BC B2 90 6C 95 A8 B6 A4 8C C3 91 E3 95 B6 96 BE 04 00 C6 8F DA BC B2 90 6C 95 A8 C5 D7 89 BD B6 92 6D AF C3 B2 D9 B6 D3 04 00 BC DA C5 B2 C5 A3 7C D7 B3 14 A2 1F AB B2 BD 21 00 02 DC B6 AF C0 0F 21 00 05 00 8C C3 91 E3 96 AF C9 89 42 DA 97 A2 CA 03 CC AB B0 C4 CC A7 C4 D7 BD 04 00 02 C9 90 BC C9 03 0C AC DD 08 D9 02 C9 92 86 10 21 01 00 40 40 89 BD A4 92 6D AF C3 C0 3F 7C 00 40 40 1F AB B2 BD A4 7B 20 02 BF DA A6 8C BE DC C5 B2 C9 06 04 00 97 46 8F EE AF C3 D3 DD 10 DB A1 01 00 40 40 0C AC B1 A4 BA C9 BA C4 D3 92 6D AF C3 D9 B6 D3 04 00 BC DA C5 B2 C5 A1 89 42 DA 97 A2 C6 CA 91 CE 8B F3 96 68 8C E4 C9 88 D7 04 00 C9 8C C3 91 E3 95 BA 8A ED 06 B1 D9 AF C3 BA C4 D3 40 40 01 00 92 6D D7 C5 B2 3F 00 BF B3 B6 A4 BF DA C5 D7 8B 43 A6 04 00 C2 B9 DB D6 A1 91 95 94 F5 A6 90 AE B4 C3 B6 D7 8D 73 AF C0 04 00 95 FB 06 B2 B2 A3 7C D7 B3 14 A2 1F AB B2 BD A4 04 00 40 40 7B 20 8B 43 02 A6 C2 B9 DB D6 A3 7C D7 B3 14 A2 02 BF C9 8C C3 91 E3 C9 96 AF C9 89 42 DA 97 A2 13 A4 98 62 A6 04 00 95 B7 B2 C3 B7 C3 B8 DA A3 7C D7 B3 14 A2 02 BF B3 B6 A4 93 90 CF DA C3 B2 C0 C9 B6 40 40 05 00 BF DA C5 D7 97 A0 C9 8F EE 95 F1 C6 8F DA BC B2 90 6C 8A D4 C6 04 00 90 71 C8 C0 95 FB 06 B2 B2 C5 40 40 40 40 A3 7C D7 B3 14 A2 1D 1A D0 DD C4 02 C6 B2 D9 A4 03 B7 B0 DD 02 C4 04 00 B2 B3 92 6A C6 95 B7 B2 C3 D0 D9 C4 B2 B2 A1 04 00 93 90 95 69 A6 88 B5 AF C3 8F A4 94 84 A6 BC C3 B2 D9 93 7A 10 A1 01 00 BA C9 90 AF 13 93 90 CF DA C0 95 A8 C9 91 E5 94 BC CA 93 7A C9 8F 8A A6 04 00 92 CA AF C3 B2 B8 D7 BC B2 A1 81 79 89 5F C9 94 E0 81 7A C6 C2 B2 04 00 C3 D3 89 BD B6 92 6D AF C3 B2 D9 10 DB B3 A3 7C 07 D9 D3 B1 A2 93 90 02 CF DA C3 B2 C0 C9 C5 D7 98 62 06 91 81 B2 A1 04 00 8C BB 8D DD C9 8F 8A 97 4C 8E D2 B6 D7 A4 94 83 B2 8E E6 D9 C5 D8 04 00 D3 D7 B3 C5 D8 BD DA 15 B2 B2 A1 01 00 8C C3 91 E3 96 AF C5 14 C4 B2 B3 94 79 D6 D8 CA A4 D6 CE 14 8C F0 04 00 8F C2 BC D4 BD B2 A1 40 40 C5 C6 BC DB 93 90 95 69 C5 DD 10 04 00 B6 D7 8F 8A 97 4C 8E D2 A6 8C A9 C2 B9 BB B4 BD DA 15 40 40 A3 7C D7 B3 14 A2 CC B3 40 40 8D A1 93 78 02 CA 8A 43 B6 3F 04 00 BC B6 D3 03 14 A9 B0 D1 C4 D7 B2 B1 DD 08 D9 02 C4 B7 C0 A1 05 00 D6 D8 C6 D6 AF C3 40 40 7C 00 40 40 02 BF B3 10 A4 7B 20 03 D7 08 91 44 92 B7 02 10 21 00 03 D7 08 91 44 92 B7 04 00 02 C9 03 BB D9 18 B0 0C 91 44 02 06 03 14 A9 B0 D1 C4 D7 B2 B1 DD 04 00 08 D9 02 13 88 F8 B7 8F E3 09 A6 8E 6E D2 D9 AF C3 B2 B3 89 5C 10 A1 01 00 94 DE C6 8B A6 97 CD BC C3 D3 D7 B4 15 B2 B2 A1 90 CC A4 90 A2 98 62 04 00 C6 C5 AF C0 8E 96 06 B1 D9 06 A4 94 DE CA B2 B2 92 6A 10 B6 04 00 D7 A4 95 4B 0D 97 CD C6 C5 AF C3 B8 DA D9 CA 0D 10 A1 7C 00 40 40 02 BF DA CA BF DA C4 BC C3 40 40 05 00 03 07 D9 D3 B1 8E 81 02 C9 BA C4 C5 DD 10 06 03 B5 CF B4 02 C9 91 44 04 00 C6 8F E6 BE C3 8D 73 AF C3 B8 DA C5 B2 B6 3F 01 00 D3 B3 03 DB 16 B0 02 13 91 D2 AF C3 B2 D9 CA 0D 10 A1 04 00 96 7B 90 6C C9 8A F3 96 5D 13 D3 B1 D9 B6 D7 C5 A1 01 00 BF C9 8A D4 A4 03 B5 DA 02 CA C1 AE AF C4 94 DE C6 C2 B2 C3 04 00 92 B2 18 C3 D0 C0 B2 DD 10 A1 14 B3 D3 C0 10 C9 03 BA DA 04 00 B8 C0 B0 02 C4 CA 8E 76 B4 C5 B8 C3 C5 A1 01 00 94 DE C9 8C BE 97 74 D4 91 D4 93 78 C6 CA 8B 43 C6 C5 D9 8F 8A 06 B1 D9 A1 04 00 C5 C6 B6 A6 8A E9 DD 13 B2 D9 D6 B3 C5 8A B4 0C 06 04 00 BD D9 DD 10 D6 A3 7C D7 B3 14 A2 1F AB B2 BD A4 97 8A 02 D1 A1 03 07 D9 D3 B1 8E 81 02 A6 04 00 8F E6 BE C3 A4 03 14 A9 B0 D1 C4 D7 B2 B1 DD 08 D9 02 C9 04 00 03 D7 08 91 44 92 B7 02 C9 8F 8A C6 8C FC B6 AF C3 B8 DA A1 01 00 BF C9 8A D4 A4 03 B5 DA 02 CA 94 DE C9 8E 96 A6 13 B7 D9 10 B9 04 00 92 B2 18 C3 D0 D9 A3 7C D7 B3 14 A2 40 40 02 BF B3 B6 A1 94 F2 8B F3 92 F8 A6 8A 43 C6 90 F6 DA 04 00 D9 D6 B3 C6 89 FC 91 A2 BC C0 C9 B6 3F 00 0C AC A4 C2 B2 04 00 13 C6 8A 43 C9 92 86 C9 95 F3 D3 8C A9 C2 B9 C1 CF B4 D6 A3 7C".split(" "));
            byte[] english = hexStringToByteArray("85 67 85 94 85 8D 85 93 85 84 85 91 85 92 85 3F 85 6E 85 85 85 85 85 88 85 82 85 84 7C CC A8 AF BC AD A2 1F AB B2 BD A1 02 CF C0 94 F2 18 D9 D6 B3 04 00 C6 C5 AF C0 C9 B6 A1 D6 B6 AF C0 C5 A1 04 00 0C AC B1 A4 03 B5 DA 02 D3 8B 43 8D 87 B2 A6 93 FC DA C5 B2 C4 C5 A1 01 00 94 F2 8B F3 92 F8 D3 95 F3 D3 91 81 B2 D3 C9 C9 8F 9F C1 10 B6 D7 C5 A3 7C B8 B2 AF B8 A2 8F EE 95 F1 02 06 B1 D9 C9 CA B2 B2 06 A4 8B E0 A6 04 00 95 A5 DC C5 B2 C4 B2 B9 C5 B2 C9 06 8C 99 10 D6 C5 A1 04 00 BF DA 13 8C A9 C2 B9 D7 DA C5 B6 AF C0 93 FA C6 AC 40 40 01 00 CF A4 03 B5 DA 02 CA 8F EE 95 F1 A6 8E E8 C6 93 FC DA C0 D7 A4 CE C4 04 00 DD 14 C9 8F EA 8D 87 A4 95 F3 A6 8C A9 C2 B9 10 BD 0E A1 04 00 BF DA 06 03 B5 DA 02 C9 03 1C D7 B2 14 02 BB A3 7C A2 02 D6 B5 A4 03 1F AB B2 BD 21 7B 30 04 00 CA DD C0 B0 A5 B5 CC A8 BD 02 C6 8A E7 A6 8F 6F BD C9 CA 04 00 8B 76 BC 17 D8 0C AC C5 B2 B6 A1 7C 00 02 C1 AF A4 8C 69 8B 43 C9 88 AB BF B3 C5 03 C2 D7 02 BC D4 06 AF C3 A1 7B 10 04 00 CF A4 91 44 06 96 B3 B2 DD 0C AC C5 40 40 7B 10 04 00 8F 43 97 9D C6 8F 6F BC C3 A4 D3 B3 A4 8F 5C 93 FA C6 C5 D9 B6 A1 7C 00 02 D4 AF 1A D8 A4 03 C4 DA 0C AC B0 A5 CA DD C0 B0 02 CA 04 00 94 F2 8B F3 92 F8 C6 8F E6 AF C3 A4 8B F3 C6 8F E3 06 AF C3 C5 B2 C4 04 00 90 B6 8B 43 06 96 B3 B8 C5 AF C1 CF B3 D0 C0 B2 10 C5 A1 7B 10 7C 00 02 BC B6 C0 06 C5 B2 A4 7B 10 04 00 8C 69 8B 43 C9 97 C7 B8 C5 D9 98 62 A6 95 B7 B6 BE C3 D4 D9 B6 A1 7B 30 04 00 03 B5 CF B4 02 C9 94 F2 8B F3 92 F8 10 B9 14 C5 40 40 7C 00 40 40 8E 64 8F E3 02 06 AF C3 D9 D0 C0 B2 10 0F A1 7B 10 04 00 03 CA AF CA AF CA 21 00 CA DD 06 B0 02 C6 8D 73 AF C3 D0 C5 A1 04 00 03 D2 D9 B8 02 06 91 D2 AF C3 D9 CA 0D 10 A3 7C A2 91 81 02 B8 CF C0 95 F3 95 A8 A6 D0 C2 B9 C3 A4 BA BA C6 04 00 8E 9D AF C3 BA B2 D6 A1 7B 10 04 00 8D 82 B8 94 83 AF C3 D4 D9 B6 D7 C5 A3 7C A2 02 DC BD DA D9 C4 BA DB 10 AF C0 A3 7C A2 D7 B3 14 02 B6 D7 93 60 8C BE 06 B1 AF C0 0F A1 04 00 03 D7 DD 14 BD 18 B0 BD 02 C6 97 88 C3 97 7E BC B2 BF B3 10 A1 04 00 C5 DD 13 D3 8B F3 91 AF C6 91 44 A6 97 8E C4 BB DA C0 D7 BC B2 A1 7C 00 D7 DD 14 BD 18 B0 BD 02 C9 8F EA 8F 8A 3F 05 00 96 59 DA C0 C9 B6 3F 00 BC AF B6 D8 BC DB D6 21 04 00 BA BA C9 90 5E 96 6B 0C AC C5 B2 B6 A3 7C A2 02 CE D7 A4 91 81 B8 03 CA DD 06 B0 02 CD 8D 73 AF C3 D0 C5 A3 7C A2 95 F3 02 A6 94 84 D8 C0 B2 C9 B6 B2 3F 04 00 8F EE 95 F1 06 97 7E BC B2 C9 B6 B2 3F A3 04 00 00 00 00 95 F3 00 00 00 00 00 00 00 8F EE 95 F1 7C A2 95 F3 02 A6 D0 C2 B9 C0 D7 04 00 00 00 CF C0 BA BA C6 8E 9D AF C3 BA B2 D6 A3 7C A2 40 40 7B 20 8E 63 94 4F 02 10 06 04 00 03 B5 CF B4 02 BB DD 06 8B 81 D2 C3 D9 D6 B3 C5 8F EE 95 F1 CA 04 00 96 B3 B2 C5 A3 7C A2 02 B5 8B E0 06 C0 D8 C5 B2 D6 A3 7C A2 89 AF 02 B4 C0 B6 B2 3F A3 04 04 00 00 00 00 59 45 53 00 00 00 00 00 4E 4F 7C A2 91 4F 02 C6 88 EA 93 78 A4 8B B3 B4 C0 C9 C6 CF C0 95 B7 B7 C0 B2 C9 04 00 B6 3F 00 8B E0 CA 8E E6 D7 C5 B2 06 40 40 A3 04 00 00 00 00 59 45 53 00 00 00 00 00 4E 4F 7C A2 02 BF DA 0C AC A4 06 DD 15 AF C3 92 54 BC C3 D0 C5 A1 04 00 8C A9 C2 B9 C0 D7 BA BA C6 8E 9D AF C3 97 88 C3 B8 DA D6 A3 7C A2 02 BF B3 B6 A4 8F EE 95 F1 06 97 7E BC B8 C5 AF C0 D7 04 00 8B E0 A6 C0 D2 C3 A4 CF C0 BA BA C6 97 88 C5 A3 7C A2 81 79 8D 95 8E 58 8C E8 02 C9 94 AF 8F FC D8 81 7A C9 8F EE 95 F1 06 B1 D9 0F A1 04 00 95 B7 B7 C0 B2 B6 B2 3F A3 04 00 00 00 00 59 45 53 00 00 00 00 00 4E 4F 7C A2 81 79 8B E0 02 C9 94 AF 8F FC D8 81 7A C9 8F EE 95 F1 06 B1 D9 0F A1 04 00 95 B7 B7 C0 B2 B6 B2 3F A3 04 00 00 00 00 59 45 53 00 00 00 00 00 4E 4F 7C A2 81 79 8B E2 02 C9 90 43 91 E4 81 7A C9 8F EE 95 F1 06 B1 D9 0F A1 04 00 95 B7 B7 C0 B2 B6 B2 3F A3 04 00 00 00 00 59 45 53 00 00 00 00 00 4E 4F 7C A2 92 6C 92 69 7F 35 30 30 02 10 B9 14 B2 B2 B6 B2 3F A3 04 04 00 00 00 00 59 45 53 00 00 00 00 00 4E 4F 7C A2 92 6C 92 69 7F 31 30 30 02 10 B9 14 B2 B2 B6 B2 3F A3 04 04 00 00 00 00 59 45 53 00 00 00 00 00 4E 4F 7C A2 92 6C 92 69 7F 31 30 30 30 02 10 B9 14 B2 B2 B6 B2 3F A3 04 04 00 00 00 00 59 45 53 00 00 00 00 00 4E 4F 7C A2 81 79 90 5F 95 B6 8B CA 8E A2 81 7A 02 C9 92 6E 90 7D 06 B1 D9 0F A1 04 00 92 6C 92 69 7F 32 30 30 30 02 13 14 B3 10 B2 3F A3 04 00 00 00 00 59 45 53 00 00 00 00 00 4E 4F 7C A2 8A 43 8A DD 90 FC 02 A6 93 8C C6 8D 73 AF C0 8F 8A C6 91 E5 B7 C5 90 58 06 B1 04 00 D9 10 DB 3F 00 81 79 8D 95 8E 58 8C E8 C9 94 AF 8F FC D8 81 7A 06 B1 C9 04 00 90 58 C9 14 BA B6 C6 89 42 BB DA C3 B2 D9 D7 BC B2 0F A3 7C A2 81 77 8B E0 02 C9 94 AF 8F FC D8 CA 04 00 00 00 C8 0C DA C0 98 72 C9 95 74 B9 8D AA C6 40 40 81 78 04 00 95 AA B6 AF C3 B2 D9 C9 CA BA DA 10 B9 10 A3 7C A2 02 BA C9 8A 58 C6 0D AF C4 8F 5A DD 13 B2 C0 03 0C B2 02 BB DD 06 04 00 8D C5 8B DF B8 C0 15 AF C3 C5 A1 88 E2 8C BE C4 BC C3 BF C9 91 A7 04 00 8E 71 C6 95 F3 C9 B1 D8 B6 A6 8B B3 B4 C0 DD 10 A1 01 00 C4 BA DB 06 BF C9 91 A7 8E 71 CA 90 5E 96 CA 96 DA C5 93 7A 13 C5 A1 04 00 BA DD C5 B2 B2 89 C1 8C B8 C5 90 AF CA 8C 99 10 C4 B6 C7 B6 BC 04 00 C3 91 BC C9 90 AF C6 8D 73 AF C1 CF AF C0 A1 01 00 10 06 A4 8F 6F C3 8D 73 B8 91 4F C6 A4 03 DC BC 02 06 C5 DD C4 B6 04 00 88 E2 8C BE A6 95 B7 B7 8F 6F BC C0 C9 BB A1 04 00 BF C9 88 E2 8C BE CA BA B3 10 A1 01 00 81 77 8A 43 C9 89 E0 06 90 B0 DA C0 C5 D7 15 A4 96 A6 C9 90 E6 92 5B C6 04 00 97 A7 AF C3 BF C9 8C FC BA B3 A6 C5 06 D2 D6 40 04 00 8A D4 8B DF C6 91 E5 B7 C5 93 87 06 A4 BF C9 8C FC BA B3 C6 8F AC BB 01 00 C5 93 87 06 8C A9 B4 D6 B3 A1 BF BC C3 BF C9 90 5E AF BD 08 04 00 CA D9 B6 90 E6 C6 A4 B6 BD B6 C6 8F AC BB B8 93 87 06 8C A9 B4 04 00 D9 CA 0D 10 A1 BF C9 93 87 C6 95 F3 95 A8 A6 89 42 BC C0 A1 81 78 01 00 B2 B2 B6 A4 BF C9 03 0C B2 02 BB DD CA 0D AF C4 BA C9 8A 58 04 00 C6 8F 5A DD 13 C0 DD 10 0F A3 7C A2 02 CE D7 D6 A1 94 F2 8B F3 92 F8 C9 03 BA B8 1B AF C4 02 13 8D 4C 09 C3 04 00 8E 97 C0 D6 B3 C5 92 6E 8C 60 A6 92 54 BC C3 D0 C5 A3 7C D7 B3 14 A2 1F AB B2 BD A1 02 14 B3 D4 D7 81 79 89 5F C9 94 E0 81 7A 04 00 CA CF 10 8C C3 91 E3 96 AF 06 8E 9D AF C3 B2 D9 D7 BC B2 A1 04 00 01 00 BA C9 90 AF C9 14 BA B6 C6 A4 CF 10 8C C3 91 E3 96 AF 06 89 42 DA 04 00 8F 5A DD 13 B2 D9 8F EA 8F 8A 06 B1 D9 D7 BC B2 DD 10 A1 04 00 01 00 BF C9 8F EA 8F 8A C6 C2 B2 C3 CA A4 BA DA B6 D7 92 B2 18 D9 04 00 97 5C 92 E8 10 A1 03 B5 CF B4 02 D3 90 53 93 96 C0 D8 06 B1 DA 15 A4 04 00 B1 C0 AF C3 D0 C3 B8 DA A3 7C 07 D9 D3 B1 A2 8C C3 91 E3 96 AF 02 06 8E 9D AF C3 B2 D9 C9 C5 D7 04 00 BF C9 8C C3 91 E3 96 AF B6 D7 40 40 04 00 94 83 AF C3 B1 09 DA 15 B2 B2 C9 10 D6 A3 7C 07 D9 D3 B1 A2 1F AB B2 BD 02 B8 DD A1 04 00 BF C9 8C C3 91 E3 96 AF C9 89 42 DA 97 A2 C4 B2 B3 C9 A6 91 81 B8 04 00 8C A9 C2 B9 C3 B8 DA C0 CF B4 A3 7C D7 B3 14 A2 88 E2 95 F3 02 C6 8F DA BC B2 90 6C 95 A8 B6 A4 8C C3 91 E3 95 B6 96 BE 04 00 C6 8F DA BC B2 90 6C 95 A8 C5 D7 89 BD B6 92 6D AF C3 B2 D9 B6 D3 04 00 BC DA C5 B2 C5 A3 7C D7 B3 14 A2 1F AB B2 BD 21 00 02 DC B6 AF C0 0F 21 00 05 00 8C C3 91 E3 96 AF C9 89 42 DA 97 A2 CA 03 CC AB B0 C4 CC A7 C4 D7 BD 04 00 02 C9 90 BC C9 03 0C AC DD 08 D9 02 C9 92 86 10 21 01 00 40 40 89 BD A4 92 6D AF C3 C0 3F 7C 00 40 40 1F AB B2 BD A4 7B 20 02 BF DA A6 8C BE DC C5 B2 C9 06 04 00 97 46 8F EE AF C3 D3 DD 10 DB A1 01 00 40 40 0C AC B1 A4 BA C9 BA C4 D3 92 6D AF C3 D9 B6 D3 04 00 BC DA C5 B2 C5 A1 89 42 DA 97 A2 C6 CA 91 CE 8B F3 96 68 8C E4 C9 88 D7 04 00 C9 8C C3 91 E3 95 BA 8A ED 06 B1 D9 AF C3 BA C4 D3 40 40 01 00 92 6D D7 C5 B2 3F 00 BF B3 B6 A4 BF DA C5 D7 8B 43 A6 04 00 C2 B9 DB D6 A1 91 95 94 F5 A6 90 AE B4 C3 B6 D7 8D 73 AF C0 04 00 95 FB 06 B2 B2 A3 7C D7 B3 14 A2 1F AB B2 BD A4 04 00 40 40 7B 20 8B 43 02 A6 C2 B9 DB D6 A3 7C D7 B3 14 A2 02 BF C9 8C C3 91 E3 C9 96 AF C9 89 42 DA 97 A2 13 A4 98 62 A6 04 00 95 B7 B2 C3 B7 C3 B8 DA A3 7C D7 B3 14 A2 02 BF B3 B6 A4 93 90 CF DA C3 B2 C0 C9 B6 40 40 05 00 BF DA C5 D7 97 A0 C9 8F EE 95 F1 C6 8F DA BC B2 90 6C 8A D4 C6 04 00 90 71 C8 C0 95 FB 06 B2 B2 C5 40 40 40 40 A3 7C D7 B3 14 A2 1D 1A D0 DD C4 02 C6 B2 D9 A4 03 B7 B0 DD 02 C4 04 00 B2 B3 92 6A C6 95 B7 B2 C3 D0 D9 C4 B2 B2 A1 04 00 93 90 95 69 A6 88 B5 AF C3 8F A4 94 84 A6 BC C3 B2 D9 93 7A 10 A1 01 00 BA C9 90 AF 13 93 90 CF DA C0 95 A8 C9 91 E5 94 BC CA 93 7A C9 8F 8A A6 04 00 92 CA AF C3 B2 B8 D7 BC B2 A1 81 79 89 5F C9 94 E0 81 7A C6 C2 B2 04 00 C3 D3 89 BD B6 92 6D AF C3 B2 D9 10 DB B3 A3 7C 07 D9 D3 B1 A2 93 90 02 CF DA C3 B2 C0 C9 C5 D7 98 62 06 91 81 B2 A1 04 00 8C BB 8D DD C9 8F 8A 97 4C 8E D2 B6 D7 A4 94 83 B2 8E E6 D9 C5 D8 04 00 D3 D7 B3 C5 D8 BD DA 15 B2 B2 A1 01 00 8C C3 91 E3 96 AF C5 14 C4 B2 B3 94 79 D6 D8 CA A4 D6 CE 14 8C F0 04 00 8F C2 BC D4 BD B2 A1 40 40 C5 C6 BC DB 93 90 95 69 C5 DD 10 04 00 B6 D7 8F 8A 97 4C 8E D2 A6 8C A9 C2 B9 BB B4 BD DA 15 40 40 A3 7C D7 B3 14 A2 CC B3 40 40 8D A1 93 78 02 CA 8A 43 B6 3F 04 00 BC B6 D3 03 14 A9 B0 D1 C4 D7 B2 B1 DD 08 D9 02 C4 B7 C0 A1 05 00 D6 D8 C6 D6 AF C3 40 40 7C 00 40 40 02 BF B3 10 A4 7B 20 03 D7 08 91 44 92 B7 02 10 21 00 03 D7 08 91 44 92 B7 04 00 02 C9 03 BB D9 18 B0 0C 91 44 02 06 03 14 A9 B0 D1 C4 D7 B2 B1 DD 04 00 08 D9 02 13 88 F8 B7 8F E3 09 A6 8E 6E D2 D9 AF C3 B2 B3 89 5C 10 A1 01 00 94 DE C6 8B A6 97 CD BC C3 D3 D7 B4 15 B2 B2 A1 90 CC A4 90 A2 98 62 04 00 C6 C5 AF C0 8E 96 06 B1 D9 06 A4 94 DE CA B2 B2 92 6A 10 B6 04 00 D7 A4 95 4B 0D 97 CD C6 C5 AF C3 B8 DA D9 CA 0D 10 A1 7C 00 40 40 02 BF DA CA BF DA C4 BC C3 40 40 05 00 03 07 D9 D3 B1 8E 81 02 C9 BA C4 C5 DD 10 06 03 B5 CF B4 02 C9 91 44 04 00 C6 8F E6 BE C3 8D 73 AF C3 B8 DA C5 B2 B6 3F 01 00 D3 B3 03 DB 16 B0 02 13 91 D2 AF C3 B2 D9 CA 0D 10 A1 04 00 96 7B 90 6C C9 8A F3 96 5D 13 D3 B1 D9 B6 D7 C5 A1 01 00 BF C9 8A D4 A4 03 B5 DA 02 CA C1 AE AF C4 94 DE C6 C2 B2 C3 04 00 92 B2 18 C3 D0 C0 B2 DD 10 A1 14 B3 D3 C0 10 C9 03 BA DA 04 00 B8 C0 B0 02 C4 CA 8E 76 B4 C5 B8 C3 C5 A1 01 00 94 DE C9 8C BE 97 74 D4 91 D4 93 78 C6 CA 8B 43 C6 C5 D9 8F 8A 06 B1 D9 A1 04 00 C5 C6 B6 A6 8A E9 DD 13 B2 D9 D6 B3 C5 8A B4 0C 06 04 00 BD D9 DD 10 D6 A3 7C D7 B3 14 A2 1F AB B2 BD A4 97 8A 02 D1 A1 03 07 D9 D3 B1 8E 81 02 A6 04 00 8F E6 BE C3 A4 03 14 A9 B0 D1 C4 D7 B2 B1 DD 08 D9 02 C9 04 00 03 D7 08 91 44 92 B7 02 C9 8F 8A C6 8C FC B6 AF C3 B8 DA A1 01 00 BF C9 8A D4 A4 03 B5 DA 02 CA 94 DE C9 8E 96 A6 13 B7 D9 10 B9 04 00 92 B2 18 C3 D0 D9 A3 7C D7 B3 14 A2 40 40 02 BF B3 B6 A1 94 F2 8B F3 92 F8 A6 8A 43 C6 90 F6 DA 04 00 D9 D6 B3 C6 89 FC 91 A2 BC C0 C9 B6 3F 00 0C AC A4 C2 B2 04 00 13 C6 8A 43 C9 92 86 C9 95 F3 D3 8C A9 C2 B9 C1 CF B4 D6 A3 7C".split(" "));
            byte[] compressData = lzCompressor.compressData(japanese85131, false);
            System.out.println("Compressed data :\t\t" + bytesToHex(compressData));
        } catch (IOException e) {
            e.printStackTrace();
        }*/
        
        //analyzeAll(true);
        //listPointers();

        //generateSatellaviewCharacterSprites(x("78000"));
        
        //SpriteReader.mergeImages("src/main/resources/gen/78000", 16, "src/main/resources/gen/merged-78000.png");

        /*byte a = b("84");
        byte b = b("40");
        int length = 20*16;
        int count = 0;
        while (count<length) {
            if ((b & 0x0F) == 0x0) System.out.println();
            String s = ShiftJIS.convertBytesToJapanese(new byte[]{a, b});
            if (s.length()<2) System.out.print(s);
            else System.out.print("■");
            if (b==b("FF")) {
                b=0;
                a++;
            } else {
                b++;
            }
            count++;
        }
        String s = ShiftJIS.convertBytesToJapanese(new byte[]{b("82"), b("4F")});
        System.out.println(s);*/

        //readTxt("intro.txt");
        
        /*int offset = x("48990");
        Sprite sprite = SpriteReader.readSatellaviewCharacter(dataBios, offset);
        String file = "src/main/resources/gen/0B.png";
        SpriteReader.saveSatellaviewCharacterSprite(sprite, file);
        offset = x("4B120");
        sprite = SpriteReader.readSatellaviewCharacter(dataBios, offset);
        file = "src/main/resources/gen/0001.png";
        SpriteReader.saveSatellaviewCharacterSprite(sprite, file);*/

        
        System.out.println(bytesToHex(ShiftJIS.convertJapaneseToBytes("のハンガー")));

        String s = "81 40 81 40 81 40 81 40 81 40 81 40 81 40 81 40 81 40 81 40 83 94 83 48 83 43 83 58 2F 2F 8E E1 82 A2 82 AA 98 72 97 98 82 AB 82 CC 83 67 83 8C 83 57 83 83 81 5B 81 45 83 6E 83 93 83 5E 81 5B 2F 93 60 90 E0 82 CC 94 E9 95 F3 82 F0 91 53 82 C4 8C A9 82 C2 82 AF 82 BE 82 B7 82 CC 82 AA 96 DA 95 57 00 81 40 81 40 81 40 81 40 81 40 81 40 81 40 81 40 81 40 81 40 83 89 83 45 83 68 2F 2F 83 78 83 65 83 89 83 93 82 CC 83 67 83 8C 83 57 83 83 81 5B 81 45 83 6E 83 93 83 5E 81 5B 2F 83 94 83 48 83 43 83 58 82 CC 8C 5A 8B 4D 95 AA 82 BE 82 AA 81 41 8D C5 8B DF 89 9F 82 B3 82 EA 8B";
        s = "95 F3 95 A8";
        //System.out.println(ShiftJIS.convertBytesToJapanese(hexStringToByteArray(s.split(" "))));
        
        String english = "{SP-20}Voice{NL}{NL}A young but skilled treasure hunter{NL}His goal: the legendary treasures{EL}";
        System.out.println(english);
        System.out.println(bytesToHex(ShiftJIS.convertEnglishToBytes(english)));
        english = "Hunters Office";
        System.out.println(english);
        System.out.println(bytesToHex(ShiftJIS.convertEnglishToBytes(english)));

        s = "CA DD C0 B0 A5 B5 CC A8 BD 7C CC A8 AF BC AD A2 1F AB B2 BD A1 02 CF C0 94 F2 18 D9 D6 B3 04 00 C6 C5 AF C0 C9 B6 A1 D6 B6 AF C0 C5 A1 04 00 0C AC B1 A4 03 B5 DA 02 D3 8B 43 8D 87 B2 A6 93 FC DA C5 B2 C4 C5 A1 01 00 94 F2 8B F3 92 F8 D3 95 F3 D3 91 81 B2 D3 C9 C9 8F 9F C1 10 B6 D7 C5 A3 7C B8 B2 AF B8 A2 8F EE 95 F1 02 06 B1 D9 C9 CA B2 B2 06 A4 8B E0 A6 04 00 95 A5 DC C5 B2 C4 B2 B9 C5 B2 C9 06 8C 99 10 D6 C5 A1 04 00 BF DA 13 8C A9 C2 B9 D7 DA C5 B6 AF C0 93 FA C6 AC 40 40 01 00 CF A4 03 B5 DA 02 CA 8F EE 95 F1 A6 8E E8 C6 93 FC DA C0 D7 A4 CE C4 04 00 DD 14 C9 8F EA 8D 87 A4 95 F3 A6 8C A9 C2 B9 10 BD 0E A1 04 00 BF DA 06 03 B5 DA 02 C9 03 1C D7 B2 14 02 BB A3 7C A2 02 D6 B5 A4 03 1F AB B2 BD 21 7B 30 04 00 CA DD C0 B0 A5 B5 CC A8 BD 02 C6 8A E7 A6 8F 6F BD C9 CA 04 00 8B 76 BC 17 D8 0C AC C5 B2 B6 A1 7C 00 02 C1 AF A4 8C 69 8B 43 C9 88 AB BF B3 C5 03 C2 D7 02 BC D4 06 AF C3 A1 7B 10 04 00 CF A4 91 44 06 96 B3 B2 DD 0C AC C5 40 40 7B 10 04 00 8F 43 97 9D C6 8F 6F BC C3 A4 D3 B3 A4 8F 5C 93 FA C6 C5 D9 B6 A1 7C 00 02 D4 AF 1A D8 A4 03 C4 DA 0C AC B0 A5 CA DD C0 B0 02 CA 04 00 94 F2 8B F3 92 F8 C6 8F E6 AF C3 A4 8B F3 C6 8F E3 06 AF C3 C5 B2 C4 04 00 90 B6 8B 43 06 96 B3 B8 C5 AF C1 CF B3 D0 C0 B2 10 C5 A1 7B 10 7C 00 02 BC B6 C0 06 C5 B2 A4 7B 10 04 00 8C 69 8B 43 C9 97 C7 B8 C5 D9 98 62 A6 95 B7 B6 BE C3 D4 D9 B6 A1 7B 30 04 00 03 B5 CF B4 02 C9 94 F2 8B F3 92 F8 10 B9 14 C5 40 40 7C 00 40 40 8E 64 8F E3 02 06 AF C3 D9 D0 C0 B2 10 0F A1 7B 10 04 00 03 CA AF CA AF CA 21 00 CA DD 06 B0 02 C6 8D 73 AF C3 D0 C5 A1 04 00 03 D2 D9 B8 02 06 91 D2 AF C3 D9 CA 0D 10 A3 7C A2 91 81 02 B8 CF C0 95 F3 95 A8 A6 D0 C2 B9 C3 A4 BA BA C6 04 00 8E 9D AF C3 BA B2 D6 A1 7B 10 04 00 8D 82 B8 94 83 AF C3 D4 D9 B6 D7 C5 A3 7C A2 02 DC BD DA D9 C4 BA DB 10 AF C0 A3 7C A2 D7 B3 14 02 B6 D7 93 60 8C BE 06 B1 AF C0 0F A1 04 00 03 D7 DD 14 BD 18 B0 BD 02 C6 97 88 C3 97 7E BC B2 BF B3 10 A1 04 00 C5 DD 13 D3 8B F3 91 AF C6 91 44 A6 97 8E C4 BB DA C0 D7 BC B2 A1 7C 00 D7 DD 14 BD 18 B0 BD 02 C9 8F EA 8F 8A 3F 05 00 96 59 DA C0 C9 B6 3F 00 BC AF B6 D8 BC DB D6 21 04 00 BA BA C9 90 5E 96 6B 0C AC C5 B2 B6 A3 7C A2 02 CE D7 A4 91 81 B8 03 CA DD 06 B0 02 CD 8D 73 AF C3 D0 C5 A3 7C A2 95 F3 02 A6 94 84 D8 C0 B2 C9 B6 B2 3F 04 00 8F EE 95 F1 06 97 7E BC B2 C9 B6 B2 3F A3 04 00 00 00 00 95 F3 00 00 00 00 00 00 00 8F EE 95 F1 7C A2 95 F3 02 A6 D0 C2 B9 C0 D7 04 00 00 00 CF C0 BA BA C6 8E 9D AF C3 BA B2 D6 A3 7C A2 40 40 7B 20 8E 63 94 4F 02 10 06 04 00 03 B5 CF B4 02 BB DD 06 8B 81 D2 C3 D9 D6 B3 C5 8F EE 95 F1 CA 04 00 96 B3 B2 C5 A3 7C A2 02 B5 8B E0 06 C0 D8 C5 B2 D6 A3 7C A2 89 AF 02 B4 C0 B6 B2 3F A3 04 04 00 00 00 00 59 45 53 00 00 00 00 00 4E 4F 7C A2 91 4F 02 C6 88 EA 93 78 A4 8B B3 B4 C0 C9 C6 CF C0 95 B7 B7 C0 B2 C9 04 00 B6 3F 00 8B E0 CA 8E E6 D7 C5 B2 06 40 40 A3 04 00 00 00 00 59 45 53 00 00 00 00 00 4E 4F 7C A2 02 BF DA 0C AC A4 06 DD 15 AF C3 92 54 BC C3 D0 C5 A1 04 00 8C A9 C2 B9 C0 D7 BA BA C6 8E 9D AF C3 97 88 C3 B8 DA D6 A3 7C A2 02 BF B3 B6 A4 8F EE 95 F1 06 97 7E BC B8 C5 AF C0 D7 04 00 8B E0 A6 C0 D2 C3 A4 CF C0 BA BA C6 97 88 C5 A3 7C A2 81 79 8D 95 8E 58 8C E8 02 C9 94 AF 8F FC D8 81 7A C9 8F EE 95 F1 06 B1 D9 0F A1 04 00 95 B7 B7 C0 B2 B6 B2 3F A3 04 00 00 00 00 59 45 53 00 00 00 00 00 4E 4F 7C A2 81 79 8B E0 02 C9 94 AF 8F FC D8 81 7A C9 8F EE 95 F1 06 B1 D9 0F A1 04 00 95 B7 B7 C0 B2 B6 B2 3F A3 04 00 00 00 00 59 45 53 00 00 00 00 00 4E 4F 7C A2 81 79 8B E2 02 C9 90 43 91 E4 81 7A C9 8F EE 95 F1 06 B1 D9 0F A1 04 00 95 B7 B7 C0 B2 B6 B2 3F A3 04 00 00 00 00 59 45 53 00 00 00 00 00 4E 4F 7C A2 92 6C 92 69 7F 35 30 30 02 10 B9 14 B2 B2 B6 B2 3F A3 04 04 00 00 00 00 59 45 53 00 00 00 00 00 4E 4F 7C A2 92 6C 92 69 7F 31 30 30 02 10 B9 14 B2 B2 B6 B2 3F A3 04 04 00 00 00 00 59 45 53 00 00 00 00 00 4E 4F 7C A2 92 6C 92 69 7F 31 30 30 30 02 10 B9 14 B2 B2 B6 B2 3F A3 04 04 00 00 00 00 59 45 53 00 00 00 00 00 4E 4F 7C A2 81 79 90 5F 95 B6 8B CA 8E A2 81 7A 02 C9 92 6E 90 7D 06 B1 D9 0F A1 04 00 92 6C 92 69 7F 32 30 30 30 02 13 14 B3 10 B2 3F A3 04 00 00 00 00 59 45 53 00 00 00 00 00 4E 4F 7C A2 8A 43 8A DD 90 FC 02 A6 93 8C C6 8D 73 AF C0 8F 8A C6 91 E5 B7 C5 90 58 06 B1 04 00 D9 10 DB 3F 00 81 79 8D 95 8E 58 8C E8 C9 94 AF 8F FC D8 81 7A 06 B1 C9 04 00 90 58 C9 14 BA B6 C6 89 42 BB DA C3 B2 D9 D7 BC B2 0F A3 7C A2 81 77 8B E0 02 C9 94 AF 8F FC D8 CA 04 00 00 00 C8 0C DA C0 98 72 C9 95 74 B9 8D AA C6 40 40 81 78 04 00 95 AA B6 AF C3 B2 D9 C9 CA BA DA 10 B9 10 A3 7C A2 02 BA C9 8A 58 C6 0D AF C4 8F 5A DD 13 B2 C0 03 0C B2 02 BB DD 06 04 00 8D C5 8B DF B8 C0 15 AF C3 C5 A1 88 E2 8C BE C4 BC C3 BF C9 91 A7 04 00 8E 71 C6 95 F3 C9 B1 D8 B6 A6 8B B3 B4 C0 DD 10 A1 01 00 C4 BA DB 06 BF C9 91 A7 8E 71 CA 90 5E 96 CA 96 DA C5 93 7A 13 C5 A1 04 00 BA DD C5 B2 B2 89 C1 8C B8 C5 90 AF CA 8C 99 10 C4 B6 C7 B6 BC 04 00 C3 91 BC C9 90 AF C6 8D 73 AF C1 CF AF C0 A1 01 00 10 06 A4 8F 6F C3 8D 73 B8 91 4F C6 A4 03 DC BC 02 06 C5 DD C4 B6 04 00 88 E2 8C BE A6 95 B7 B7 8F 6F BC C0 C9 BB A1 04 00 BF C9 88 E2 8C BE CA BA B3 10 A1 01 00 81 77 8A 43 C9 89 E0 06 90 B0 DA C0 C5 D7 15 A4 96 A6 C9 90 E6 92 5B C6 04 00 97 A7 AF C3 BF C9 8C FC BA B3 A6 C5 06 D2 D6 40 04 00 8A D4 8B DF C6 91 E5 B7 C5 93 87 06 A4 BF C9 8C FC BA B3 C6 8F AC BB 01 00 C5 93 87 06 8C A9 B4 D6 B3 A1 BF BC C3 BF C9 90 5E AF BD 08 04 00 CA D9 B6 90 E6 C6 A4 B6 BD B6 C6 8F AC BB B8 93 87 06 8C A9 B4 04 00 D9 CA 0D 10 A1 BF C9 93 87 C6 95 F3 95 A8 A6 89 42 BC C0 A1 81 78 01 00 B2 B2 B6 A4 BF C9 03 0C B2 02 BB DD CA 0D AF C4 BA C9 8A 58 04 00 C6 8F 5A DD 13 C0 DD 10 0F A3 7C A2 02 CE D7 D6 A1 94 F2 8B F3 92 F8 C9 03 BA B8 1B AF C4 02 13 8D 4C 09 C3 04 00 8E 97 C0 D6 B3 C5 92 6E 8C 60 A6 92 54 BC C3 D0 C5 A3 7C D7 B3 14 A2 1F AB B2 BD A1 02 14 B3 D4 D7 81 79 89 5F C9 94 E0 81 7A 04 00 CA CF 10 8C C3 91 E3 96 AF 06 8E 9D AF C3 B2 D9 D7 BC B2 A1 04 00 01 00 BA C9 90 AF C9 14 BA B6 C6 A4 CF 10 8C C3 91 E3 96 AF 06 89 42 DA 04 00 8F 5A DD 13 B2 D9 8F EA 8F 8A 06 B1 D9 D7 BC B2 DD 10 A1 04 00 01 00 BF C9 8F EA 8F 8A C6 C2 B2 C3 CA A4 BA DA B6 D7 92 B2 18 D9 04 00 97 5C 92 E8 10 A1 03 B5 CF B4 02 D3 90 53 93 96 C0 D8 06 B1 DA 15 A4 04 00 B1 C0 AF C3 D0 C3 B8 DA A3 7C 07 D9 D3 B1 A2 8C C3 91 E3 96 AF 02 06 8E 9D AF C3 B2 D9 C9 C5 D7 04 00 BF C9 8C C3 91 E3 96 AF B6 D7 40 40 04 00 94 83 AF C3 B1 09 DA 15 B2 B2 C9 10 D6 A3 7C 07 D9 D3 B1 A2 1F AB B2 BD 02 B8 DD A1 04 00 BF C9 8C C3 91 E3 96 AF C9 89 42 DA 97 A2 C4 B2 B3 C9 A6 91 81 B8 04 00 8C A9 C2 B9 C3 B8 DA C0 CF B4 A3 7C D7 B3 14 A2 88 E2 95 F3 02 C6 8F DA BC B2 90 6C 95 A8 B6 A4 8C C3 91 E3 95 B6 96 BE 04 00 C6 8F DA BC B2 90 6C 95 A8 C5 D7 89 BD B6 92 6D AF C3 B2 D9 B6 D3 04 00 BC DA C5 B2 C5 A3 7C D7 B3 14 A2 1F AB B2 BD 21 00 02 DC B6 AF C0 0F 21 00 05 00 8C C3 91 E3 96 AF C9 89 42 DA 97 A2 CA 03 CC AB B0 C4 CC A7 C4 D7 BD 04 00 02 C9 90 BC C9 03 0C AC DD 08 D9 02 C9 92 86 10 21 01 00 40 40 89 BD A4 92 6D AF C3 C0 3F 7C 00 40 40 1F AB B2 BD A4 7B 20 02 BF DA A6 8C BE DC C5 B2 C9 06 04 00 97 46 8F EE AF C3 D3 DD 10 DB A1 01 00 40 40 0C AC B1 A4 BA C9 BA C4 D3 92 6D AF C3 D9 B6 D3 04 00 BC DA C5 B2 C5 A1 89 42 DA 97 A2 C6 CA 91 CE 8B F3 96 68 8C E4 C9 88 D7 04 00 C9 8C C3 91 E3 95 BA 8A ED 06 B1 D9 AF C3 BA C4 D3 40 40 01 00 92 6D D7 C5 B2 3F 00 BF B3 B6 A4 BF DA C5 D7 8B 43 A6 04 00 C2 B9 DB D6 A1 91 95 94 F5 A6 90 AE B4 C3 B6 D7 8D 73 AF C0 04 00 95 FB 06 B2 B2 A3 7C D7 B3 14 A2 1F AB B2 BD A4 04 00 40 40 7B 20 8B 43 02 A6 C2 B9 DB D6 A3 7C D7 B3 14 A2 02 BF C9 8C C3 91 E3 C9 96 AF C9 89 42 DA 97 A2 13 A4 98 62 A6 04 00 95 B7 B2 C3 B7 C3 B8 DA A3 7C D7 B3 14 A2 02 BF B3 B6 A4 93 90 CF DA C3 B2 C0 C9 B6 40 40 05 00 BF DA C5 D7 97 A0 C9 8F EE 95 F1 C6 8F DA BC B2 90 6C 8A D4 C6 04 00 90 71 C8 C0 95 FB 06 B2 B2 C5 40 40 40 40 A3 7C D7 B3 14 A2 1D 1A D0 DD C4 02 C6 B2 D9 A4 03 B7 B0 DD 02 C4 04 00 B2 B3 92 6A C6 95 B7 B2 C3 D0 D9 C4 B2 B2 A1 04 00 93 90 95 69 A6 88 B5 AF C3 8F A4 94 84 A6 BC C3 B2 D9 93 7A 10 A1 01 00 BA C9 90 AF 13 93 90 CF DA C0 95 A8 C9 91 E5 94 BC CA 93 7A C9 8F 8A A6 04 00 92 CA AF C3 B2 B8 D7 BC B2 A1 81 79 89 5F C9 94 E0 81 7A C6 C2 B2 04 00 C3 D3 89 BD B6 92 6D AF C3 B2 D9 10 DB B3 A3 7C 07 D9 D3 B1 A2 93 90 02 CF DA C3 B2 C0 C9 C5 D7 98 62 06 91 81 B2 A1 04 00 8C BB 8D DD C9 8F 8A 97 4C 8E D2 B6 D7 A4 94 83 B2 8E E6 D9 C5 D8 04 00 D3 D7 B3 C5 D8 BD DA 15 B2 B2 A1 01 00 8C C3 91 E3 96 AF C5 14 C4 B2 B3 94 79 D6 D8 CA A4 D6 CE 14 8C F0 04 00 8F C2 BC D4 BD B2 A1 40 40 C5 C6 BC DB 93 90 95 69 C5 DD 10 04 00 B6 D7 8F 8A 97 4C 8E D2 A6 8C A9 C2 B9 BB B4 BD DA 15 40 40 A3 7C D7 B3 14 A2 CC B3 40 40 8D A1 93 78 02 CA 8A 43 B6 3F 04 00 BC B6 D3 03 14 A9 B0 D1 C4 D7 B2 B1 DD 08 D9 02 C4 B7 C0 A1 05 00 D6 D8 C6 D6 AF C3 40 40 7C 00 40 40 02 BF B3 10 A4 7B 20 03 D7 08 91 44 92 B7 02 10 21 00 03 D7 08 91 44 92 B7 04 00 02 C9 03 BB D9 18 B0 0C 91 44 02 06 03 14 A9 B0 D1 C4 D7 B2 B1 DD 04 00 08 D9 02 13 88 F8 B7 8F E3 09 A6 8E 6E D2 D9 AF C3 B2 B3 89 5C 10 A1 01 00 94 DE C6 8B A6 97 CD BC C3 D3 D7 B4 15 B2 B2 A1 90 CC A4 90 A2 98 62 04 00 C6 C5 AF C0 8E 96 06 B1 D9 06 A4 94 DE CA B2 B2 92 6A 10 B6 04 00 D7 A4 95 4B 0D 97 CD C6 C5 AF C3 B8 DA D9 CA 0D 10 A1 7C 00 40 40 02 BF DA CA BF DA C4 BC C3 40 40 05 00 03 07 D9 D3 B1 8E 81 02 C9 BA C4 C5 DD 10 06 03 B5 CF B4 02 C9 91 44 04 00 C6 8F E6 BE C3 8D 73 AF C3 B8 DA C5 B2 B6 3F 01 00 D3 B3 03 DB 16 B0 02 13 91 D2 AF C3 B2 D9 CA 0D 10 A1 04 00 96 7B 90 6C C9 8A F3 96 5D 13 D3 B1 D9 B6 D7 C5 A1 01 00 BF C9 8A D4 A4 03 B5 DA 02 CA C1 AE AF C4 94 DE C6 C2 B2 C3 04 00 92 B2 18 C3 D0 C0 B2 DD 10 A1 14 B3 D3 C0 10 C9 03 BA DA 04 00 B8 C0 B0 02 C4 CA 8E 76 B4 C5 B8 C3 C5 A1 01 00 94 DE C9 8C BE 97 74 D4 91 D4 93 78 C6 CA 8B 43 C6 C5 D9 8F 8A 06 B1 D9 A1 04 00 C5 C6 B6 A6 8A E9 DD 13 B2 D9 D6 B3 C5 8A B4 0C 06 04 00 BD D9 DD 10 D6 A3 7C D7 B3 14 A2 1F AB B2 BD A4 97 8A 02 D1 A1 03 07 D9 D3 B1 8E 81 02 A6 04 00 8F E6 BE C3 A4 03 14 A9 B0 D1 C4 D7 B2 B1 DD 08 D9 02 C9 04 00 03 D7 08 91 44 92 B7 02 C9 8F 8A C6 8C FC B6 AF C3 B8 DA A1 01 00 BF C9 8A D4 A4 03 B5 DA 02 CA 94 DE C9 8E 96 A6 13 B7 D9 10 B9 04 00 92 B2 18 C3 D0 D9 A3 7C D7 B3 14 A2 40 40 02 BF B3 B6 A1 94 F2 8B F3 92 F8 A6 8A 43 C6 90 F6 DA 04 00 D9 D6 B3 C6 89 FC 91 A2 BC C0 C9 B6 3F 00 0C AC A4 C2 B2 04 00 13 C6 8A 43 C9 92 86 C9 95 F3 D3 8C A9 C2 B9 C1 CF B4 D6 A3 7C ";
        System.out.println(ShiftJIS.convertBytesToJapanese(hexStringToByteArray(s.split(" "))));

        String eng85131 = "CA DD C0 B0 A5 B5 CC A8 BD 7C CC A8 AF BC AD A2 1F AB B2 BD A1 02 CF C0 94 F2 18 D9 D6 B3 04 00 C6 C5 AF C0 C9 B6 A1 D6 B6 AF C0 C5 A1 04 00 0C AC B1 A4 03 B5 DA 02 D3 8B 43 8D 87 B2 A6 93 FC DA C5 B2 C4 C5 A1 01 00 94 F2 8B F3 92 F8 D3 95 F3 D3 91 81 B2 D3 C9 C9 8F 9F C1 10 B6 D7 C5 A3 7C B8 B2 AF B8 A2 8F EE 95 F1 02 06 B1 D9 C9 CA B2 B2 06 A4 8B E0 A6 04 00 95 A5 DC C5 B2 C4 B2 B9 C5 B2 C9 06 8C 99 10 D6 C5 A1 04 00 BF DA 13 8C A9 C2 B9 D7 DA C5 B6 AF C0 93 FA C6 AC 40 40 01 00 CF A4 03 B5 DA 02 CA 8F EE 95 F1 A6 8E E8 C6 93 FC DA C0 D7 A4 CE C4 04 00 DD 14 C9 8F EA 8D 87 A4 95 F3 A6 8C A9 C2 B9 10 BD 0E A1 04 00 BF DA 06 03 B5 DA 02 C9 03 1C D7 B2 14 02 BB A3 7C A2 02 D6 B5 A4 03 1F AB B2 BD 21 7B 30 04 00 CA DD C0 B0 A5 B5 CC A8 BD 02 C6 8A E7 A6 8F 6F BD C9 CA 04 00 8B 76 BC 17 D8 0C AC C5 B2 B6 A1 7C 00 02 C1 AF A4 8C 69 8B 43 C9 88 AB BF B3 C5 03 C2 D7 02 BC D4 06 AF C3 A1 7B 10 04 00 CF A4 91 44 06 96 B3 B2 DD 0C AC C5 40 40 7B 10 04 00 8F 43 97 9D C6 8F 6F BC C3 A4 D3 B3 A4 8F 5C 93 FA C6 C5 D9 B6 A1 7C 00 02 D4 AF 1A D8 A4 03 C4 DA 0C AC B0 A5 CA DD C0 B0 02 CA 04 00 94 F2 8B F3 92 F8 C6 8F E6 AF C3 A4 8B F3 C6 8F E3 06 AF C3 C5 B2 C4 04 00 90 B6 8B 43 06 96 B3 B8 C5 AF C1 CF B3 D0 C0 B2 10 C5 A1 7B 10 7C 00 02 BC B6 C0 06 C5 B2 A4 7B 10 04 00 8C 69 8B 43 C9 97 C7 B8 C5 D9 98 62 A6 95 B7 B6 BE C3 D4 D9 B6 A1 7B 30 04 00 03 B5 CF B4 02 C9 94 F2 8B F3 92 F8 10 B9 14 C5 40 40 7C 00 40 40 8E 64 8F E3 02 06 AF C3 D9 D0 C0 B2 10 0F A1 7B 10 04 00 03 CA AF CA AF CA 21 00 CA DD 06 B0 02 C6 8D 73 AF C3 D0 C5 A1 04 00 03 D2 D9 B8 02 06 91 D2 AF C3 D9 CA 0D 10 A3 7C A2 91 81 02 B8 CF C0 95 F3 95 A8 A6 D0 C2 B9 C3 A4 BA BA C6 04 00 8E 9D AF C3 BA B2 D6 A1 7B 10 04 00 8D 82 B8 94 83 AF C3 D4 D9 B6 D7 C5 A3 7C A2 02 DC BD DA D9 C4 BA DB 10 AF C0 A3 7C A2 D7 B3 14 02 B6 D7 93 60 8C BE 06 B1 AF C0 0F A1 04 00 03 D7 DD 14 BD 18 B0 BD 02 C6 97 88 C3 97 7E BC B2 BF B3 10 A1 04 00 C5 DD 13 D3 8B F3 91 AF C6 91 44 A6 97 8E C4 BB DA C0 D7 BC B2 A1 7C 00 D7 DD 14 BD 18 B0 BD 02 C9 8F EA 8F 8A 3F 05 00 96 59 DA C0 C9 B6 3F 00 BC AF B6 D8 BC DB D6 21 04 00 BA BA C9 90 5E 96 6B 0C AC C5 B2 B6 A3 7C A2 02 CE D7 A4 91 81 B8 03 CA DD 06 B0 02 CD 8D 73 AF C3 D0 C5 A3 7C A2 95 F3 02 A6 94 84 D8 C0 B2 C9 B6 B2 3F 04 00 8F EE 95 F1 06 97 7E BC B2 C9 B6 B2 3F A3 04 00 00 00 00 95 F3 00 00 00 00 00 00 00 8F EE 95 F1 7C A2 95 F3 02 A6 D0 C2 B9 C0 D7 04 00 00 00 CF C0 BA BA C6 8E 9D AF C3 BA B2 D6 A3 7C A2 40 40 7B 20 8E 63 94 4F 02 10 06 04 00 03 B5 CF B4 02 BB DD 06 8B 81 D2 C3 D9 D6 B3 C5 8F EE 95 F1 CA 04 00 96 B3 B2 C5 A3 7C A2 02 B5 8B E0 06 C0 D8 C5 B2 D6 A3 7C A2 89 AF 02 B4 C0 B6 B2 3F A3 04 04 00 00 00 00 59 45 53 00 00 00 00 00 4E 4F 7C A2 91 4F 02 C6 88 EA 93 78 A4 8B B3 B4 C0 C9 C6 CF C0 95 B7 B7 C0 B2 C9 04 00 B6 3F 00 8B E0 CA 8E E6 D7 C5 B2 06 40 40 A3 04 00 00 00 00 59 45 53 00 00 00 00 00 4E 4F 7C A2 02 BF DA 0C AC A4 06 DD 15 AF C3 92 54 BC C3 D0 C5 A1 04 00 8C A9 C2 B9 C0 D7 BA BA C6 8E 9D AF C3 97 88 C3 B8 DA D6 A3 7C A2 02 BF B3 B6 A4 8F EE 95 F1 06 97 7E BC B8 C5 AF C0 D7 04 00 8B E0 A6 C0 D2 C3 A4 CF C0 BA BA C6 97 88 C5 A3 7C A2 81 79 8D 95 8E 58 8C E8 02 C9 94 AF 8F FC D8 81 7A C9 8F EE 95 F1 06 B1 D9 0F A1 04 00 95 B7 B7 C0 B2 B6 B2 3F A3 04 00 00 00 00 59 45 53 00 00 00 00 00 4E 4F 7C A2 81 79 8B E0 02 C9 94 AF 8F FC D8 81 7A C9 8F EE 95 F1 06 B1 D9 0F A1 04 00 95 B7 B7 C0 B2 B6 B2 3F A3 04 00 00 00 00 59 45 53 00 00 00 00 00 4E 4F 7C A2 81 79 8B E2 02 C9 90 43 91 E4 81 7A C9 8F EE 95 F1 06 B1 D9 0F A1 04 00 95 B7 B7 C0 B2 B6 B2 3F A3 04 00 00 00 00 59 45 53 00 00 00 00 00 4E 4F 7C A2 92 6C 92 69 7F 35 30 30 02 10 B9 14 B2 B2 B6 B2 3F A3 04 04 00 00 00 00 59 45 53 00 00 00 00 00 4E 4F 7C A2 92 6C 92 69 7F 31 30 30 02 10 B9 14 B2 B2 B6 B2 3F A3 04 04 00 00 00 00 59 45 53 00 00 00 00 00 4E 4F 7C A2 92 6C 92 69 7F 31 30 30 30 02 10 B9 14 B2 B2 B6 B2 3F A3 04 04 00 00 00 00 59 45 53 00 00 00 00 00 4E 4F 7C A2 81 79 90 5F 95 B6 8B CA 8E A2 81 7A 02 C9 92 6E 90 7D 06 B1 D9 0F A1 04 00 92 6C 92 69 7F 32 30 30 30 02 13 14 B3 10 B2 3F A3 04 00 00 00 00 59 45 53 00 00 00 00 00 4E 4F 7C A2 8A 43 8A DD 90 FC 02 A6 93 8C C6 8D 73 AF C0 8F 8A C6 91 E5 B7 C5 90 58 06 B1 04 00 D9 10 DB 3F 00 81 79 8D 95 8E 58 8C E8 C9 94 AF 8F FC D8 81 7A 06 B1 C9 04 00 90 58 C9 14 BA B6 C6 89 42 BB DA C3 B2 D9 D7 BC B2 0F A3 7C A2 81 77 8B E0 02 C9 94 AF 8F FC D8 CA 04 00 00 00 C8 0C DA C0 98 72 C9 95 74 B9 8D AA C6 40 40 81 78 04 00 95 AA B6 AF C3 B2 D9 C9 CA BA DA 10 B9 10 A3 7C A2 02 BA C9 8A 58 C6 0D AF C4 8F 5A DD 13 B2 C0 03 0C B2 02 BB DD 06 04 00 8D C5 8B DF B8 C0 15 AF C3 C5 A1 88 E2 8C BE C4 BC C3 BF C9 91 A7 04 00 8E 71 C6 95 F3 C9 B1 D8 B6 A6 8B B3 B4 C0 DD 10 A1 01 00 C4 BA DB 06 BF C9 91 A7 8E 71 CA 90 5E 96 CA 96 DA C5 93 7A 13 C5 A1 04 00 BA DD C5 B2 B2 89 C1 8C B8 C5 90 AF CA 8C 99 10 C4 B6 C7 B6 BC 04 00 C3 91 BC C9 90 AF C6 8D 73 AF C1 CF AF C0 A1 01 00 10 06 A4 8F 6F C3 8D 73 B8 91 4F C6 A4 03 DC BC 02 06 C5 DD C4 B6 04 00 88 E2 8C BE A6 95 B7 B7 8F 6F BC C0 C9 BB A1 04 00 BF C9 88 E2 8C BE CA BA B3 10 A1 01 00 81 77 8A 43 C9 89 E0 06 90 B0 DA C0 C5 D7 15 A4 96 A6 C9 90 E6 92 5B C6 04 00 97 A7 AF C3 BF C9 8C FC BA B3 A6 C5 06 D2 D6 40 04 00 8A D4 8B DF C6 91 E5 B7 C5 93 87 06 A4 BF C9 8C FC BA B3 C6 8F AC BB 01 00 C5 93 87 06 8C A9 B4 D6 B3 A1 BF BC C3 BF C9 90 5E AF BD 08 04 00 CA D9 B6 90 E6 C6 A4 B6 BD B6 C6 8F AC BB B8 93 87 06 8C A9 B4 04 00 D9 CA 0D 10 A1 BF C9 93 87 C6 95 F3 95 A8 A6 89 42 BC C0 A1 81 78 01 00 B2 B2 B6 A4 BF C9 03 0C B2 02 BB DD CA 0D AF C4 BA C9 8A 58 04 00 C6 8F 5A DD 13 C0 DD 10 0F A3 7C A2 02 CE D7 D6 A1 94 F2 8B F3 92 F8 C9 03 BA B8 1B AF C4 02 13 8D 4C 09 C3 04 00 8E 97 C0 D6 B3 C5 92 6E 8C 60 A6 92 54 BC C3 D0 C5 A3 7C D7 B3 14 A2 1F AB B2 BD A1 02 14 B3 D4 D7 81 79 89 5F C9 94 E0 81 7A 04 00 CA CF 10 8C C3 91 E3 96 AF 06 8E 9D AF C3 B2 D9 D7 BC B2 A1 04 00 01 00 BA C9 90 AF C9 14 BA B6 C6 A4 CF 10 8C C3 91 E3 96 AF 06 89 42 DA 04 00 8F 5A DD 13 B2 D9 8F EA 8F 8A 06 B1 D9 D7 BC B2 DD 10 A1 04 00 01 00 BF C9 8F EA 8F 8A C6 C2 B2 C3 CA A4 BA DA B6 D7 92 B2 18 D9 04 00 97 5C 92 E8 10 A1 03 B5 CF B4 02 D3 90 53 93 96 C0 D8 06 B1 DA 15 A4 04 00 B1 C0 AF C3 D0 C3 B8 DA A3 7C 07 D9 D3 B1 A2 8C C3 91 E3 96 AF 02 06 8E 9D AF C3 B2 D9 C9 C5 D7 04 00 BF C9 8C C3 91 E3 96 AF B6 D7 40 40 04 00 94 83 AF C3 B1 09 DA 15 B2 B2 C9 10 D6 A3 7C 07 D9 D3 B1 A2 1F AB B2 BD 02 B8 DD A1 04 00 BF C9 8C C3 91 E3 96 AF C9 89 42 DA 97 A2 C4 B2 B3 C9 A6 91 81 B8 04 00 8C A9 C2 B9 C3 B8 DA C0 CF B4 A3 7C D7 B3 14 A2 88 E2 95 F3 02 C6 8F DA BC B2 90 6C 95 A8 B6 A4 8C C3 91 E3 95 B6 96 BE 04 00 C6 8F DA BC B2 90 6C 95 A8 C5 D7 89 BD B6 92 6D AF C3 B2 D9 B6 D3 04 00 BC DA C5 B2 C5 A3 7C D7 B3 14 A2 1F AB B2 BD 21 00 02 DC B6 AF C0 0F 21 00 05 00 8C C3 91 E3 96 AF C9 89 42 DA 97 A2 CA 03 CC AB B0 C4 CC A7 C4 D7 BD 04 00 02 C9 90 BC C9 03 0C AC DD 08 D9 02 C9 92 86 10 21 01 00 40 40 89 BD A4 92 6D AF C3 C0 3F 7C 00 40 40 1F AB B2 BD A4 7B 20 02 BF DA A6 8C BE DC C5 B2 C9 06 04 00 97 46 8F EE AF C3 D3 DD 10 DB A1 01 00 40 40 0C AC B1 A4 BA C9 BA C4 D3 92 6D AF C3 D9 B6 D3 04 00 BC DA C5 B2 C5 A1 89 42 DA 97 A2 C6 CA 91 CE 8B F3 96 68 8C E4 C9 88 D7 04 00 C9 8C C3 91 E3 95 BA 8A ED 06 B1 D9 AF C3 BA C4 D3 40 40 01 00 92 6D D7 C5 B2 3F 00 BF B3 B6 A4 BF DA C5 D7 8B 43 A6 04 00 C2 B9 DB D6 A1 91 95 94 F5 A6 90 AE B4 C3 B6 D7 8D 73 AF C0 04 00 95 FB 06 B2 B2 A3 7C D7 B3 14 A2 1F AB B2 BD A4 04 00 40 40 7B 20 8B 43 02 A6 C2 B9 DB D6 A3 7C D7 B3 14 A2 02 BF C9 8C C3 91 E3 C9 96 AF C9 89 42 DA 97 A2 13 A4 98 62 A6 04 00 95 B7 B2 C3 B7 C3 B8 DA A3 7C D7 B3 14 A2 02 BF B3 B6 A4 93 90 CF DA C3 B2 C0 C9 B6 40 40 05 00 BF DA C5 D7 97 A0 C9 8F EE 95 F1 C6 8F DA BC B2 90 6C 8A D4 C6 04 00 90 71 C8 C0 95 FB 06 B2 B2 C5 40 40 40 40 A3 7C D7 B3 14 A2 1D 1A D0 DD C4 02 C6 B2 D9 A4 03 B7 B0 DD 02 C4 04 00 B2 B3 92 6A C6 95 B7 B2 C3 D0 D9 C4 B2 B2 A1 04 00 93 90 95 69 A6 88 B5 AF C3 8F A4 94 84 A6 BC C3 B2 D9 93 7A 10 A1 01 00 BA C9 90 AF 13 93 90 CF DA C0 95 A8 C9 91 E5 94 BC CA 93 7A C9 8F 8A A6 04 00 92 CA AF C3 B2 B8 D7 BC B2 A1 81 79 89 5F C9 94 E0 81 7A C6 C2 B2 04 00 C3 D3 89 BD B6 92 6D AF C3 B2 D9 10 DB B3 A3 7C 07 D9 D3 B1 A2 93 90 02 CF DA C3 B2 C0 C9 C5 D7 98 62 06 91 81 B2 A1 04 00 8C BB 8D DD C9 8F 8A 97 4C 8E D2 B6 D7 A4 94 83 B2 8E E6 D9 C5 D8 04 00 D3 D7 B3 C5 D8 BD DA 15 B2 B2 A1 01 00 8C C3 91 E3 96 AF C5 14 C4 B2 B3 94 79 D6 D8 CA A4 D6 CE 14 8C F0 04 00 8F C2 BC D4 BD B2 A1 40 40 C5 C6 BC DB 93 90 95 69 C5 DD 10 04 00 B6 D7 8F 8A 97 4C 8E D2 A6 8C A9 C2 B9 BB B4 BD DA 15 40 40 A3 7C D7 B3 14 A2 CC B3 40 40 8D A1 93 78 02 CA 8A 43 B6 3F 04 00 BC B6 D3 03 14 A9 B0 D1 C4 D7 B2 B1 DD 08 D9 02 C4 B7 C0 A1 05 00 D6 D8 C6 D6 AF C3 40 40 7C 00 40 40 02 BF B3 10 A4 7B 20 03 D7 08 91 44 92 B7 02 10 21 00 03 D7 08 91 44 92 B7 04 00 02 C9 03 BB D9 18 B0 0C 91 44 02 06 03 14 A9 B0 D1 C4 D7 B2 B1 DD 04 00 08 D9 02 13 88 F8 B7 8F E3 09 A6 8E 6E D2 D9 AF C3 B2 B3 89 5C 10 A1 01 00 94 DE C6 8B A6 97 CD BC C3 D3 D7 B4 15 B2 B2 A1 90 CC A4 90 A2 98 62 04 00 C6 C5 AF C0 8E 96 06 B1 D9 06 A4 94 DE CA B2 B2 92 6A 10 B6 04 00 D7 A4 95 4B 0D 97 CD C6 C5 AF C3 B8 DA D9 CA 0D 10 A1 7C 00 40 40 02 BF DA CA BF DA C4 BC C3 40 40 05 00 03 07 D9 D3 B1 8E 81 02 C9 BA C4 C5 DD 10 06 03 B5 CF B4 02 C9 91 44 04 00 C6 8F E6 BE C3 8D 73 AF C3 B8 DA C5 B2 B6 3F 01 00 D3 B3 03 DB 16 B0 02 13 91 D2 AF C3 B2 D9 CA 0D 10 A1 04 00 96 7B 90 6C C9 8A F3 96 5D 13 D3 B1 D9 B6 D7 C5 A1 01 00 BF C9 8A D4 A4 03 B5 DA 02 CA C1 AE AF C4 94 DE C6 C2 B2 C3 04 00 92 B2 18 C3 D0 C0 B2 DD 10 A1 14 B3 D3 C0 10 C9 03 BA DA 04 00 B8 C0 B0 02 C4 CA 8E 76 B4 C5 B8 C3 C5 A1 01 00 94 DE C9 8C BE 97 74 D4 91 D4 93 78 C6 CA 8B 43 C6 C5 D9 8F 8A 06 B1 D9 A1 04 00 C5 C6 B6 A6 8A E9 DD 13 B2 D9 D6 B3 C5 8A B4 0C 06 04 00 BD D9 DD 10 D6 A3 7C D7 B3 14 A2 1F AB B2 BD A4 97 8A 02 D1 A1 03 07 D9 D3 B1 8E 81 02 A6 04 00 8F E6 BE C3 A4 03 14 A9 B0 D1 C4 D7 B2 B1 DD 08 D9 02 C9 04 00 03 D7 08 91 44 92 B7 02 C9 8F 8A C6 8C FC B6 AF C3 B8 DA A1 01 00 BF C9 8A D4 A4 03 B5 DA 02 CA 94 DE C9 8E 96 A6 13 B7 D9 10 B9 04 00 92 B2 18 C3 D0 D9 A3 7C D7 B3 14 A2 40 40 02 BF B3 B6 A1 94 F2 8B F3 92 F8 A6 8A 43 C6 90 F6 DA 04 00 D9 D6 B3 C6 89 FC 91 A2 BC C0 C9 B6 3F 00 0C AC A4 C2 B2 04 00 13 C6 8A 43 C9 92 86 C9 95 F3 D3 8C A9 C2 B9 C1 CF B4 D6 A3 7C";
        LzCompressor lzCompressor = new LzCompressor();
        try {
            byte[] compressData = lzCompressor.compressData(hexStringToByteArray(eng85131.split(" ")), false);
            String myComp = bytesToHex(compressData);
            System.out.println("My compressed data :\t"+myComp);
        } catch (IOException e) {
            e.printStackTrace();
        }

        //decompressDataFiles(data);
        //decompressPointerFiles(data);
        //generateEmptyTranslationFile();
        PointerTable tableData1 = new PointerTable(
                x("84000"),
                x("84033"),
                x("80000"),
                x("84050")
        );
        PointerTable tablePointer1 = new PointerTable(
                x("80000"),
                x("80035"),
                x("80000"),
                x("80050")
        );
        tableData1.setType(PointerTableType.DATA);
        tablePointer1.setType(PointerTableType.POINTER);
        loadPointers(tableData1);
        loadPointers(tablePointer1);
        generateEnglishFiles(tableData1);
        writeEnglishFiles(data, tableData1);
        writeEnglishFiles(data, tablePointer1);


        DataWriter.saveData("D:\\git\\treasure-conflix\\roms\\work\\BS Treasure Conflix (English) - SNES - extended.sfc", data);
    }

    private static void writeEnglishFiles(byte[] data, PointerTable table) {
        int offsetData = table.newOffsetStart;
        for (Map.Entry<Integer, PointerEntry> e : table.pointers.entrySet()) {
            PointerEntry p = e.getValue();
            int offset = p.getOffset();
            int value = p.getValue();
            
            String filename = h(value);
            File file = null;
            if (table.getType()== PointerTableType.DATA) {
                file = new File("src/main/resources/translations/english/data-files/"+filename+".data");
                if (!file.exists()) {
                    file = new File("src/main/resources/translations/japanese/data-files/"+filename+".data");
                }
            } else {
                file = new File("src/main/resources/translations/english/pointer-files/"+filename+".data");
                if (!file.exists()) {
                    file = new File("src/main/resources/translations/japanese/pointer-files/"+filename+".data");
                }
            }
            try {
                byte[] bytes = Files.readAllBytes(file.toPath());
                LzCompressor compressor = new LzCompressor();
                byte[] compressData = compressor.compressData(bytes, false);

                // Write new pointer value
                data[offset] = (byte) ((offsetData % 256) & 0xFF);
                data[offset + 1] = (byte) (offsetData / 256);
                
                // Write new data
                for (int i=0;i<compressData.length;i++) {
                    data[offsetData++] = compressData[i];
                }
                
            } catch (IOException ex) {
                Logger.getLogger(Conflix.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }

    public static void loadPointers(PointerTable table) {
        for (int i=table.getOffsetStart();i<table.getOffsetEnd();i = i + 2) {
            int offset = i;
            byte a = data[i];
            byte b = data[i+1];
            int value = table.getShift() + ((b & 0xFF) * 0x100) + (a & 0xFF);
            PointerEntry pointer = new PointerEntry(offset, value, table.getShift());
            table.add(pointer);
        }
    }

    public static byte[] loadPointerFile(int offset) {
        String file = h(offset);
        try {
            return Files.readAllBytes(new File(String.format("src/main/resources/translations/japanese/pointer-files/%s.data", file)).toPath());
        } catch (IOException ex) {
            Logger.getLogger(Conflix.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }
    
    public static void generateEnglishFiles(PointerTable table) {
        byte[] tableData;
        for (Map.Entry<Integer, PointerEntry> e : table.pointers.entrySet()) {
            PointerEntry p = e.getValue();
            int value = p.getValue();
            tableData = new byte[0];
            byte[] pointerFile = null;
            String pointerFileName = "";
            if (dataFilePointerFileMap.containsKey(value)) {
                int pf = dataFilePointerFileMap.get(value);
                pointerFile = loadPointerFile(pf);
                pointerFileName = h(pf);
            }
            int offsetTranslation = 0;
            Map<Integer, Translation> translationMap = loadTranslations(value);
            if (translationMap==null) continue;
            for (Map.Entry<Integer, Translation> f : translationMap.entrySet()) {
                Translation translation = f.getValue();
                byte[] dataValue = translation.getDataValue();
                String english = translation.getEnglish();
                if (english!=null && !english.isEmpty()) {
                    dataValue = ShiftJIS.convertEnglishToBytes(english);
                }
                tableData = ArrayUtils.addAll(tableData, dataValue);
                if (offsetTranslation>0 && translation.getPointerOffset()>0 && pointerFile!=null) {
                    pointerFile[translation.getPointerOffset()] = (byte) (((offsetTranslation+1) % 256) & 0xFF);
                    pointerFile[translation.getPointerOffset() + 1] = (byte) ((offsetTranslation+1) / 256);
                }
                offsetTranslation += dataValue.length;
            }
            try {
                new FileOutputStream("src/main/resources/translations/english/data-files/"+h(value)+".data").write(tableData);
                if (pointerFile!=null){
                    new FileOutputStream("src/main/resources/translations/english/pointer-files/" + pointerFileName + ".data").write(pointerFile);
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }
    
    static Map<Integer, Translation> loadTranslations(int offset) {
        System.out.println("Loading Translations for "+h(offset));
        Map<Integer, Translation> translationMap = new TreeMap<>();
        String file = String.format("translations/%s.txt", h(offset));
        if (!new File("src/main/resources/"+file).exists()) return null;
        BufferedReader br = new BufferedReader(
                new InputStreamReader(
                        Objects.requireNonNull(Conflix.class.getClassLoader().getResourceAsStream(file)), StandardCharsets.UTF_8));
        String line = null;
        try {
            line = br.readLine();
        } catch (IOException e) {
            e.printStackTrace();
        }
        Translation t = new Translation();
        while (line != null) {
            if (line.contains("=")) {
                String[] split = line.split("=");
                if (split.length > 0) {
                    if (split[0].equals(Constants.TRANSLATION_FILE_POINTER)) {
                        String[] pointer = split[1].split(";");
                        t.setPointerFile(pointer[0]);
                        if (pointer[1].length()>0) t.setPointerOffset(x(pointer[1]));
                        t.setPointerValue(x(pointer[2]));
                    }
                    if (split[0].equals(Constants.TRANSLATION_FILE_DATA)) {
                        String[] data = split[1].split(";");
                        t.setDataFile(data[0]);
                        t.setDataOffset(x(data[1]));
                        t.setDataValue(hexStringToByteArray(data[2].split(" ")));
                    }
                    if (split[0].equals(Constants.TRANSLATION_FILE_JPN)) {
                        t.setJapanese(split[1]);
                    }
                    if (split[0].equals(Constants.TRANSLATION_FILE_ENG)) {
                        if (split.length>1 && split[1].length()>0) t.setEnglish(split[1]);
                        translationMap.put(t.getDataOffset(), t);
                        t = new Translation();
                    }
                }
            }
            try {
                line = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return translationMap;
    }
    
    public static void generateEmptyTranslationFile() {
        String dataFile = "85131";
        String pointerFile = "80100";
        try {
            data = Files.readAllBytes(new File(String.format("src/main/resources/translations/japanese/data-files/%s.data", dataFile)).toPath());
        } catch (IOException ex) {
            Logger.getLogger(Conflix.class.getName()).log(Level.SEVERE, null, ex);
        }
        int offset = 0;
        while (offset<data.length) {
            int dataOffset = offset;
            int pointerValue = dataOffset+1;
            byte[] dataValue = ShiftJIS.readUntilEndOfLine(data, offset);
            String japanese = ShiftJIS.convertBytesToJapanese(dataValue);
            System.out.println(Constants.TRANSLATION_FILE_POINTER+"="+pointerFile+";;"+h(pointerValue));
            System.out.println(Constants.TRANSLATION_FILE_DATA+"="+dataFile+";"+h(dataOffset)+";"+bytesToHex(dataValue));
            System.out.println(Constants.TRANSLATION_FILE_JPN+"="+japanese);
            System.out.println(Constants.TRANSLATION_FILE_ENG+"=");
            System.out.println();
            offset += dataValue.length;
        }
    }

    public static void decompressDataFiles(byte[] data) {
        int start = x("84000");
        int end = x("84033");
        int shift = x("80000");
        String output = "src/main/resources/translations/japanese/data-files";
        decompressTable(data, start, end, shift, output);
    }

    public static void decompressPointerFiles(byte[] data) {
        int start = x("80000");
        int end = x("80035");
        int shift = x("80000");
        String output = "src/main/resources/translations/japanese/pointer-files";
        decompressTable(data, start, end, shift, output);
    }

    private static void decompressTable(byte[] data, int start, int end, int shift, String outputFolder) {
        for (int i=start;i<end;i = i + 2) {
            byte a = data[i];
            byte b = data[i+1];
            int offset = shift + ((b & 0xFF) * 0x100) + (a & 0xFF);
            LzDecompressor lzDecompressor = new LzDecompressor();
            lzDecompressor.decompressData(data, offset, outputFolder+"/"+ h(offset)+".data", false);
            byte[] decompressedData = lzDecompressor.getDecompressedData();
            System.out.println(ShiftJIS.convertBytesToJapanese(decompressedData));
        }
    }

    public static void readTxt(String file) {
        try {
            BufferedReader br = new BufferedReader(
                    new InputStreamReader(
                            Objects.requireNonNull(Conflix.class.getClassLoader().getResourceAsStream(file)), StandardCharsets.UTF_8));
            String line = br.readLine();
            while (line!=null) {
                for (String s : line.split("(?<=\\G.{4})")) {
                    System.out.println(s);
                }
                line = br.readLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    public static void generateSatellaviewCharacterSprites(int offset) {
        int start = offset;
        int end = start + x("8000");
        while (offset<end) {
            Sprite sprite = SpriteReader.readSatellaviewCharacter(dataBios, offset);
            String file = "src/main/resources/gen/"+h(start)+"/" + h(offset) + ".png";
            SpriteReader.saveSatellaviewCharacterSprite(sprite, file);
            offset += x("18");
        }
    }
    
    public static void listPointers() {
        for (Integer i : readTable(data, x("50000"), x("5001A"))) {
            System.out.print(h(i) + "\t");
        }
        System.out.println();
        for (Integer i : readTable(data, x("50100"), x("50123"))) {
            System.out.print(h(i) + "\t");
        }
        System.out.println();
        for (Integer i : readTable(data, x("50200"), x("50220"))) {
            System.out.print(h(i) + "\t");
        }
    }
    
    public static void analyzeAll(boolean decompress) {
        LzDecompressor lzDecompressor = new LzDecompressor();
        for (Integer i : readTable(data, x("18000"), x("1802F"))) {
            System.out.print(h(i) + "\t");
            if (decompress) lzDecompressor.decompressData(data, i);
        }
        System.out.println();
        for (Integer i : readTable(data, x("18100"), x("1812F"))) {
            System.out.print(h(i) + "\t");
            if (decompress) lzDecompressor.decompressData(data, i);
        }
        System.out.println();
        for (Integer i : readTable(data, x("18200"), x("1822F"))) {
            System.out.print(h(i) + "\t");
            if (decompress) lzDecompressor.decompressData(data, i);
        }
        System.out.println();
        for (Integer i : readTable(data, x("18300"), x("1832F"))) {
            System.out.print(h(i) + "\t");
            if (decompress) lzDecompressor.decompressData(data, i);
        }
        System.out.println();
        for (Integer i : readTable(data, x("18400"), x("1842F"))) {
            System.out.print(h(i) + "\t");
            if (decompress) lzDecompressor.decompressData(data, i);
        }
        System.out.println();
        for (Integer i : readTable(data, x("18500"), x("1852F"))) {
            System.out.print(h(i) + "\t");
            if (decompress) lzDecompressor.decompressData(data, i);
        }
        System.out.println();
        for (Integer i : readTable(data, x("18600"), x("1862F"))) {
            System.out.print(h(i) + "\t");
            if (decompress) lzDecompressor.decompressData(data, i);
        }
        System.out.println();
        for (Integer i : readTable(data, x("18700"), x("1872F"))) {
            System.out.print(h(i) + "\t");

        }
        for (Integer i : readTable(data, x("50000"), x("5001A"))) {
            System.out.print(h(i) + "\t");
            if (decompress) lzDecompressor.decompressData(data, i);
        }
        System.out.println();
        for (Integer i : readTable(data, x("50100"), x("50123"))) {
            System.out.print(h(i) + "\t");
            if (decompress) lzDecompressor.decompressData(data, i);
        }
        System.out.println();
        for (Integer i : readTable(data, x("50200"), x("50220"))) {
            System.out.print(h(i) + "\t");
            if (decompress) lzDecompressor.decompressData(data, i);
        }

        for (Integer i : readTable(data, x("FFF00"), x("FFFE6"))) {
            try {
                System.out.print(h(i)+"\t");
                if (decompress) lzDecompressor.decompressData(data, i);
            } catch (Exception e) {
                System.out.println("Error " +h(i));
            }

        }
    }
    
    public static List<Integer> readTable(byte[] data, int start, int end) {
        List<Integer> offsets = new ArrayList<>();
        int offset = start;
        while (offset<end) {
            int a = data[offset];
            int b = data[offset+1];
            int c = data[offset+2];
            c = c - x("C0");
            int offsetData = (c & 0xFF)*x("10000") + (b & 0xFF)*x("100")+(a & 0xFF);
            offsets.add(offsetData);
            offset += 3;
        }
        return offsets;
    }
    
    public static void analyzeBytePairs(){
        int length = 12;
        int offset = 0;
        while (offset+length*2<data.length) {
            byte[] bytes = Arrays.copyOfRange(data, offset, offset + length*2);
            BytePair[] pairs = new BytePair[length];
            for (int i = 0, bytesLength = bytes.length; i < bytesLength; i = i+2) {
                byte a = bytes[i];
                byte b = bytes[i+1];
                pairs[i/2] = new BytePair(a,b);
            }
            
            if (!allPairs(pairs, (byte) 0)
                    && !allPairs(pairs, (byte) 0xFF)
                    && pairs[0].equals(pairs[6])
                    && pairs[1].equals(pairs[4])
                    && pairs[7].equals(pairs[9])
                    && pairs[4].equals(pairs[11])
                    && !pairs[0].equals(pairs[1])
                    /*&& !pairs[0].equals(pairs[2])
                    && !pairs[0].equals(pairs[3])
                    && !pairs[0].equals(pairs[5])
                    && !pairs[1].equals(pairs[2])
                    && !pairs[1].equals(pairs[3])
                    && !pairs[1].equals(pairs[7])
                    && !pairs[8].equals(pairs[10])*/
            ) {
                System.out.printf("%s - %s\n", h(offset), Utils.bytesToHex(bytes));
            }
            //"START+SELECT
            offset++;
        }
    }
    
    public void analyzeBytes(){
        int length = 12;
        int offset = 0;
        while (offset+length<data.length) {
            byte[] bytes = Arrays.copyOfRange(data, offset, offset + length);
            if (!allBytes(bytes, (byte) 0)
                    && !allBytes(bytes, (byte) 0xFF)
                    && bytes[0]==bytes[6]
                    && bytes[1]==bytes[4]
                    && bytes[7]==bytes[9]
                    && bytes[4]==bytes[11]
                    && bytes[0]!=bytes[1]
                    && bytes[0]!=bytes[2]
                    && bytes[0]!=bytes[3]
                    && bytes[0]!=bytes[5]
                    && bytes[1]!=bytes[2]
                    && bytes[1]!=bytes[3]
                    && bytes[1]!=bytes[7]
                    && bytes[8]!=bytes[10]
            ) {
                System.out.printf("%s - %s\n", h(offset), Utils.bytesToHex(bytes));
            }
            //"START+SELECT
            offset++;
        }
    }

    public static boolean allBytes(byte[] data, byte val) {
        for (byte b:data) {
            if (b!=val) return false;
        }
        return true;
    }

    public static boolean allPairs(BytePair[] data, byte val) {
        for (BytePair bp:data) {
            if (!bp.equals(new BytePair(val, val))) return false;
        }
        return true;
    }
    
    
}
